{
  "api": [],
  "api/cpymadtools": [
    {
      "source": ">>> # Say we have set the LHC coupling knobs to 1e-3\n>>> dqmin = get_closest_tune_approach(\n...     madx,\n...     \"lhc\",                    # will find the knobs automatically\n...     sequence=\"lhcb1\",\n...     telescopic_squeeze=True,  # influences the knobs definition\n...     run3=True,                # influences the knobs definition (LHC Run 3)\n... )\n0.001",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "betatron-coupling-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example"
        ]
      },
      "doc_lineno": 44
    },
    {
      "source": ">>> complex_cminus = get_cminus_from_coupling_rdts(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "betatron-coupling-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 43
    },
    {
      "source": ">>> complex_cminus = get_cminus_from_coupling_rdts(madx, patterns=[\"^BPM.*B[12]$\"])",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "betatron-coupling-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 50
    },
    {
      "source": ">>> twiss_rdts = get_coupling_rdts(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "betatron-coupling-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 15
    },
    {
      "source": ">>> match_no_coupling_through_ripkens(\n...     madx, sequence=\"lhcb1\", location=\"IP5\", vary_knobs=[\"kqsx.3l5\", \"kqsx.3r5\"]\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "betatron-coupling-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 17
    },
    {
      "source": "from pyhdtoolkit.cpymadtools.lhc import LHCSetup\n# use this now",
      "names": [
        {
          "import_components": [
            "pyhdtoolkit",
            "cpymadtools",
            "lhc"
          ],
          "code_str": "pyhdtoolkit.cpymadtools.lhc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "pyhdtoolkit.cpymadtools.lhc"
        },
        {
          "import_components": [
            "pyhdtoolkit",
            "cpymadtools",
            "lhc",
            "LHCSetup"
          ],
          "code_str": "LHCSetup",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyhdtoolkit.cpymadtools.lhc._setup.LHCSetup"
        }
      ],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "LHC-Specific Utilities"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": "from pyhdtoolkit.cpymadtools.lhc._setup import LHCSetup\n# use this now",
      "names": [
        {
          "import_components": [
            "pyhdtoolkit",
            "cpymadtools",
            "lhc",
            "_setup"
          ],
          "code_str": "pyhdtoolkit.cpymadtools.lhc._setup",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "pyhdtoolkit.cpymadtools.lhc._setup"
        },
        {
          "import_components": [
            "pyhdtoolkit",
            "cpymadtools",
            "lhc",
            "_setup",
            "LHCSetup"
          ],
          "code_str": "LHCSetup",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyhdtoolkit.cpymadtools.lhc._setup.LHCSetup"
        }
      ],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "LHC-Specific Utilities"
        ]
      },
      "doc_lineno": 25
    },
    {
      "source": ">>> correct_lhc_global_coupling(madx, sequence=\"lhcb1\", telescopic_squeeze=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 26
    },
    {
      "source": ">>> twiss_with_rdts = get_lhc_bpms_twiss_and_rdts(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": ">>> add_markers_around_lhc_ip(\n...     madx, sequence=f\"lhcb1\", ip=1, n_markers=1000, interval=0.001\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 39
    },
    {
      "source": ">>> install_ac_dipole_as_kicker(\n...     madx,\n...     deltaqx=-0.01,  # driven horizontal tune to Qxd = 62.31 - 0.01 = 62.30\n...     deltaqy=0.012,  # driven vertical tune to Qyd = 60.32 + 0.012 = 60.332\n...     sigma_x=2,  # bunch amplitude kick in the horizontal plane\n...     sigma_y=2,  # bunch amplitude kick in the vertical plane\n...     beam=1,  # beam for which to install and kick\n...     start_turn=100,  # when to turn on the AC Dipole\n...     ramp_turns=2000,  # how many turns to ramp up/down the AC Dipole\n...     top_turns=6600,  # how many turns to keep the AC Dipole at full kick\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 64
    },
    {
      "source": ">>> install_ac_dipole_as_matrix(madx, deltaqx=-0.01, deltaqy=0.012, beam=1)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 48
    },
    {
      "source": ">>> misalign_lhc_ir_quadrupoles(\n...     madx, ips=[1], quadrupoles=[1, 2, 3, 4, 5, 6], beam=1, sides=\"RL\", dx=\"1E-5\"\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 42
    },
    {
      "source": ">>> misalign_lhc_ir_quadrupoles(\n...     madx, ips=[5],\n...     quadrupoles=[7, 8, 9, 10],\n...     beam=1,\n...     sides=\"RL\",\n...     dpsi=\"1E-3 + 8E-4 * TGAUSS(2.5)\",\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 50
    },
    {
      "source": ">>> misalign_lhc_ir_quadrupoles(\n...     madx,\n...     ips=[1, 5],\n...     quadrupoles=list(range(1, 11)),\n...     beam=1,\n...     sides=\"RL\",\n...     dy=1e-5,  # ok too as cpymad converts this to a string first\n...     dpsi=\"1E-3 + 8E-4 * TGAUSS(2.5)\"\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 62
    },
    {
      "source": ">>> misalign_lhc_triplets(madx, ip=1, sides=\"RL\", dx=\"1E-5 * TGAUSS(2.5)\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 25
    },
    {
      "source": ">>> misalign_lhc_triplets(madx, ip=5, sides=\"RL\", dpsi=\"0.001 * TGAUSS(2.5)\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 31
    },
    {
      "source": ">>> observation_bpms = get_lhc_bpms_list(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 17
    },
    {
      "source": ">>> get_lhc_tune_and_chroma_knobs(\"LHC\", beam=1, telescopic_squeeze=False)\n('dQx.b1', 'dQy.b1', 'dQpx.b1', 'dQpy.b1')",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 22
    },
    {
      "source": ">>> get_lhc_tune_and_chroma_knobs(\"LHC\", beam=2, run3=True)\n('dQx.b2_op', 'dQx.b2_op', 'dQpx.b2_op', 'dQpx.b2_op')",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 27
    },
    {
      "source": ">>> get_lhc_tune_and_chroma_knobs(\"HLLHC\", beam=2)\n('kqtf.b2_sq', 'kqtd.b2_sq', 'ksf.b2_sq', 'ksd.b2_sq')",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 32
    },
    {
      "source": ">>> ip5_x, ip5_y = get_size_at_ip(madx, ip=5)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 22
    },
    {
      "source": ">>> make_sixtrack_output(madx, energy=6800)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 13
    },
    {
      "source": ">>> reset_lhc_bump_flags(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 10
    },
    {
      "source": ">>> apply_lhc_colinearity_knob(madx, colinearity_knob_value=5, ir=1)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 25
    },
    {
      "source": ">>> apply_lhc_colinearity_knob_delta(madx, colinearity_knob_delta=3.5, ir=1)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": ">>> apply_lhc_coupling_knob(madx, coupling_knob=5e-4, beam=1)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> # It is recommended to re-match tunes after this routine\n>>> matching.match_tunes(madx, \"lhc\", \"lhcb1\", 62.27, 60.36)\n>>> apply_lhc_rigidity_waist_shift_knob(madx, rigidty_waist_shift_value=1.5, ir=5)\n>>> matching.match_tunes(madx, \"lhc\", \"lhcb1\", 62.31, 60.32)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 32
    },
    {
      "source": ">>> carry_colinearity_knob_over(madx, ir=5, to_left=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> deactivate_lhc_arc_sextupoles(madx, beam=1)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 12
    },
    {
      "source": ">>> power_landau_octupoles(madx, beam=1, mo_current=350, defect_arc=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 15
    },
    {
      "source": ">>> random_kwargs = {}\n>>> for order in range(1, 16):\n...     for ab in \"AB\":\n...         random_kwargs[f\"{ab}{order:d}\"] = random.randint(0, 20)\n>>> switch_magnetic_errors(madx, **random_kwargs)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": ">>> switch_magnetic_errors(madx, \"B6\"=1e-4)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 29
    },
    {
      "source": ">>> vary_independent_ir_quadrupoles(\n...     madx, quad_numbers=[10, 11, 12, 13], ip=1, sides=(\"r\", \"l\")\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 25
    },
    {
      "source": ">>> orbit_setup = get_current_orbit_setup(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 13
    },
    {
      "source": ">>> sextupoles_powering = get_magnets_powering(madx, patterns=[r\"^ms\\.\"])",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 44
    },
    {
      "source": ">>> arc_knobs = query_arc_correctors_powering(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": ">>> triplet_knobs = query_triplet_correctors_powering(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": ">>> correct_lhc_global_coupling(madx, sequence=\"lhcb1\", telescopic_squeeze=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 26
    },
    {
      "source": ">>> correct_lhc_orbit(madx, sequence=\"lhcb1\", plane=\"y\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 25
    },
    {
      "source": ">>> tune_results = do_kmodulation(madx, ir=1, side=\"right\", steps=100, stepsize=3e-8)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 37
    },
    {
      "source": ">>> with LHCSetup(run=2, opticsfile=\"2018/PROTON/opticsfile.22\", beam=2) as madx:\n...    # do some stuff",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 46
    },
    {
      "source": ">>> with LHCSetup(run=3, opticsfile=\"R2022a_A30cmC30cmA10mL200cm.madx\", slicefactor=4, stdout=False) as madx:\n...    # do some stuff",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 53
    },
    {
      "source": ">>> variables, specials = lhc_orbit_variables()",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 11
    },
    {
      "source": ">>> make_lhc_beams(madx, energy=6800, emittance_x=2.5e-6, emittance_y=3e-6)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 22
    },
    {
      "source": ">>> make_lhc_beams(madx, energy=6800, emittance_x=2.5e-6, emittance_y=3e-6, b4=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 29
    },
    {
      "source": ">>> make_lhc_thin(madx, sequence=\"lhcb1\", slicefactor=4)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 23
    },
    {
      "source": ">>> madx = prepare_lhc_run2(\n...     \"/afs/cern.ch/eng/lhc/optics/runII/2018/PROTON/opticsfile.22\", beam=2, stdout=True\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 39
    },
    {
      "source": ">>> madx = prepare_lhc_run3(\n...     \"R2022a_A30cmC30cmA10mL200cm.madx\", slicefactor=4, stdout=True\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 35
    },
    {
      "source": ">>> re_cycle_sequence(madx, sequence=\"lhcb1\", start=\"MSIA.EXIT.B1\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 17
    },
    {
      "source": ">>> orbit_setup = setup_lhc_orbit(madx, scheme=\"lhc_top\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": ">>> ips_df = get_ips_twiss(madx, chrom=True, ripken=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 17
    },
    {
      "source": ">>> ir_df = get_ir_twiss(madx, chrom=True, ripken=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": ">>> matching.match_chromaticities(\n...     madx,\n...     None,              # this is not LHC or HLLHC\n...     sequence=\"CAS3\",\n...     dq1_target=100,\n...     dq2_target=100,\n...     varied_knobs=[\"ksf\", \"ksd\"],  # only chroma knobs\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples"
        ]
      },
      "doc_lineno": 46
    },
    {
      "source": ">>> matching.match_tunes_and_chromaticities(\n...     madx,\n...     dq1_target=100,\n...     dq2_target=100,\n...     varied_knobs=[\"ksf\", \"ksd\"],  # only chroma knobs\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples"
        ]
      },
      "doc_lineno": 61
    },
    {
      "source": ">>> matching.match_chromaticities(\n...     madx,\n...     \"lhc\",                    # will find the knobs automatically\n...     sequence=\"lhcb1\",\n...     dq1_target=2.0,\n...     dq2_target=2.0,\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples"
        ]
      },
      "doc_lineno": 72
    },
    {
      "source": ">>> matching.match_tunes(\n...     madx,\n...     None,              # this is not LHC or HLLHC\n...     sequence=\"CAS3\",\n...     q1_target=6.335,\n...     q2_target=6.29,\n...     varied_knobs=[\"kqf\", \"kqd\"],  # only tune knobs\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 46
    },
    {
      "source": ">>> matching.match_tunes_and_chromaticities(\n...     madx,\n...     q1_target=6.335,\n...     q2_target=6.29,\n...     varied_knobs=[\"kqf\", \"kqd\"],  # only tune knobs\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 61
    },
    {
      "source": ">>> matching.match_tunes(\n...     madx,\n...     \"lhc\",                    # will find the knobs automatically\n...     sequence=\"lhcb1\",\n...     q1_target=62.31,\n...     q2_target=60.32,\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 72
    },
    {
      "source": ">>> matching.match_tunes_and_chromaticities(\n...     madx,\n...     None,              # this is not LHC or HLLHC\n...     sequence=\"CAS3\",\n...     q1_target=6.335,\n...     q2_target=6.29,\n...     dq1_target=100,\n...     dq2_target=100,\n...     varied_knobs=[\"kqf\", \"kqd\", \"ksf\", \"ksd\"],\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 78
    },
    {
      "source": ">>> matching.match_tunes_and_chromaticities(\n...     madx,\n...     q1_target=6.335,\n...     q2_target=6.29,\n...     dq1_target=100,\n...     dq2_target=100,\n...     varied_knobs=[\"kqf\", \"kqd\", \"ksf\", \"ksd\"],\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 95
    },
    {
      "source": ">>> matching.match_tunes_and_chromaticities(\n...     madx,\n...     \"lhc\",                    # will find the knobs automatically\n...     sequence=\"lhcb1\",\n...     q1_target=62.31,\n...     q2_target=60.32,\n...     dq1_target=2.0,\n...     dq2_target=2.0,\n...     run3=True,  # influences the knobs definition\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 108
    },
    {
      "source": ">>> beam_parameters = query_beam_attributes(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "parameters",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "Example"
        ]
      },
      "doc_lineno": 15
    },
    {
      "source": ">>> ampdet_coeffs = get_amplitude_detuning(madx, order=2, closedorbit=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example"
        ]
      },
      "doc_lineno": 45
    },
    {
      "source": ">>> tracks_dict = get_amplitude_detuning(\n...     madx, order=3, model=3, exact=True, icase=5, no=6\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example"
        ]
      },
      "doc_lineno": 52
    },
    {
      "source": ">>> rdts_df = get_rdts(madx, order=3, fringe=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 46
    },
    {
      "source": ">>> tracks_dict = get_rdts(\n...     madx, order=3, model=3, method=6, nst=3, exact=True, icase=5\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 53
    },
    {
      "source": ">>> tracks_dict = ptc_track_particle(\n...     madx, nturns=1023, initial_coordinates=(2e-4, 0, 1e-4, 0, 0, 0)\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 72
    },
    {
      "source": ">>> tracks_dict = ptc_track_particle(\n...     madx, nturns=10, initial_coordinates=(2e-4, 0, 1e-4, 0, 0, 0),\n...     model=3, method=6, nst=3, exact=True\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 80
    },
    {
      "source": ">>> twiss_ptc_df = ptc_twiss(madx, order=3)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 52
    },
    {
      "source": ">>> tracks_dict = ptc_twiss(\n...     madx, order=3, model=3, method=6, nst=3, exact=True, icase=5\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 59
    },
    {
      "source": ">>> tracks_dict = track_single_particle(\n...     madx, nturns=1023, initial_coordinates=(2e-4, 0, 1e-4, 0, 0, 0)\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "tracking-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example",
          "Example",
          "Tracking Routines",
          "Example"
        ]
      },
      "doc_lineno": 43
    },
    {
      "source": ">>> dynap_tfs = make_footprint_table(madx)\n>>> qxs, qys = get_footprint_lines(dynap_tfs)\n>>> plt.plot(qxs, qys, \"o--\", label=\"Tune Footprint from DYNAP Table\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "tune-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example",
          "Example",
          "Tracking Routines",
          "Tune Utilities",
          "Example"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": ">>> fig, axis = plt.subplots()\n>>> dynap_tfs = make_footprint_table(madx)\n>>> footprint_polygons = get_footprint_patches(dynap_tfs)\n>>> axis.add_collection(footprint_polygons)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "tune-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example",
          "Example",
          "Tracking Routines",
          "Tune Utilities",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 23
    },
    {
      "source": ">>> dynap_dframe = make_footprint_table(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "tune-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example",
          "Example",
          "Tracking Routines",
          "Tune Utilities",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 29
    },
    {
      "source": ">>> ips_df = get_pattern_twiss(madx=madx, patterns=[\"IP\"])",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "twiss-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example",
          "Example",
          "Tracking Routines",
          "Tune Utilities",
          "Example",
          "Example",
          "TWISS Routines",
          "Examples"
        ]
      },
      "doc_lineno": 35
    },
    {
      "source": ">>> triplets_df = get_pattern_twiss(\n...     madx=madx,\n...     patterns=[\n...         r\"MQXA.[12345][RL]1\",  # Q1 and Q3 LHC\n...         r\"MQXB.[AB][12345][RL]1\",  # Q2A and Q2B LHC\n...         r\"MQXF[AB].[AB][12345][RL]1\",  # Q1 to Q3 A and B HL-LHC\n...     ],\n... )",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "twiss-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example",
          "Example",
          "Tracking Routines",
          "Tune Utilities",
          "Example",
          "Example",
          "TWISS Routines",
          "Examples"
        ]
      },
      "doc_lineno": 41
    },
    {
      "source": ">>> twiss_df = get_twiss_tfs(madx, chrom=True, ripken=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "twiss-routines",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example",
          "Example",
          "Tracking Routines",
          "Tune Utilities",
          "Example",
          "Example",
          "TWISS Routines",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 17
    },
    {
      "source": ">>> madx.command.twiss()\n>>> export_madx_table(madx, table_name=\"TWISS\", file_name=\"twiss.tfs\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "miscellaneous-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example",
          "Example",
          "Tracking Routines",
          "Tune Utilities",
          "Example",
          "Example",
          "TWISS Routines",
          "Examples",
          "Miscellaneous Utilities",
          "Example"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": ">>> twiss_tfs = get_table_tfs(madx, table_name=\"TWISS\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "miscellaneous-utilities",
        "headings": [
          "Cpymadtools",
          "Betatron Coupling Utilities",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Matching Routines",
          "Examples",
          "Examples",
          "Parameters",
          "PTC Routines",
          "Example",
          "Example",
          "Example",
          "Tracking Routines",
          "Tune Utilities",
          "Example",
          "Example",
          "TWISS Routines",
          "Examples",
          "Miscellaneous Utilities",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 18
    }
  ],
  "api/maths": [
    {
      "source": "C_matrix = np.exp(1j * np.random.rand(500, 500))",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "methodology-and-use-case",
        "headings": [
          "Maths",
          "Nonconvex Phase Synchronization",
          "Methodology and Use Case:"
        ]
      },
      "doc_lineno": 23
    },
    {
      "source": "C_matrix = np.exp(1j * M_matrix)",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "methodology-and-use-case",
        "headings": [
          "Maths",
          "Nonconvex Phase Synchronization",
          "Methodology and Use Case:"
        ]
      },
      "doc_lineno": 50
    },
    {
      "source": ">>> real_noised_measurements = np.ndarray(...)\n>>> C_herm = np.exp(1j * np.deg2rad(RealNoisedMeas))\n>>> pr = PhaseReconstructor(C_herm)\n>>> complex_eigenvector_method_result = pr.get_eigenvector_estimator(\n...     pr.leading_eigenvector\n... )\n>>> reconstructed = np.abs(\n...     pr.convert_complex_result_to_phase_values(\n...         complex_eigenvector_method_result, deg=True\n...     )\n... ).reshape(n_observation_points)",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "methodology-and-use-case",
        "headings": [
          "Maths",
          "Nonconvex Phase Synchronization",
          "Methodology and Use Case:",
          "Example"
        ]
      },
      "doc_lineno": 8
    },
    {
      "source": ">>> best_fit_func, best_fit_params = best_fit_distribution(data, 200, axis)",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "stats-fitting",
        "headings": [
          "Maths",
          "Nonconvex Phase Synchronization",
          "Stats Fitting",
          "Example"
        ]
      },
      "doc_lineno": 21
    },
    {
      "source": ">>> best_fit_func, best_fit_params = best_fit_distribution(data, 200, axis)\n>>> pdf = fitting.make_pdf(best_fit_func, best_fit_params)",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "stats-fitting",
        "headings": [
          "Maths",
          "Nonconvex Phase Synchronization",
          "Stats Fitting",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> import scipy.stats as st\n>>> tested_dists = {st.chi: \"Chi\", st.expon: \"Exponential\", st.laplace: \"Laplace\"}\n>>> set_distributions_dict(tested_dists)",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "stats-fitting",
        "headings": [
          "Maths",
          "Nonconvex Phase Synchronization",
          "Stats Fitting",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 16
    },
    {
      "source": ">>> get_magnitude(10)\n1",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "utilities",
        "headings": [
          "Maths",
          "Nonconvex Phase Synchronization",
          "Stats Fitting",
          "Example",
          "Example",
          "Utilities",
          "Examples"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": ">>> get_magnitude(0.0311)\n-2",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "utilities",
        "headings": [
          "Maths",
          "Nonconvex Phase Synchronization",
          "Stats Fitting",
          "Example",
          "Example",
          "Utilities",
          "Examples"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": ">>> get_magnitude(1e-7)\n-7",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "utilities",
        "headings": [
          "Maths",
          "Nonconvex Phase Synchronization",
          "Stats Fitting",
          "Example",
          "Example",
          "Utilities",
          "Examples"
        ]
      },
      "doc_lineno": 24
    },
    {
      "source": ">>> import numpy as np\n>>> q = np.array([-330,  230,  430, -720,  750, -110,  410, -340, -950, -630])\n>>> get_scaled_values_and_magnitude_string(q)\n(array([-3.3,  2.3,  4.3, -7.2,  7.5, -1.1,  4.1, -3.4, -9.5, -6.3]), '{-2}')",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "utilities",
        "headings": [
          "Maths",
          "Nonconvex Phase Synchronization",
          "Stats Fitting",
          "Example",
          "Example",
          "Utilities",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 17
    }
  ],
  "api/models": [],
  "api/optics": [
    {
      "source": ">>> params = compute_beam_parameters(1.9, 5e-6, 5e-6, 2e-3)\n>>> print(params)\nBeam Parameters for particle of charge 1\nBeam momentum = 1.900 GeV/c\nNormalized x-emittance = 5.000 mm mrad\nNormalized y-emittance = 5.000 mm mrad\nMomentum deviation deltap/p = 0.002\n-> Beam total energy = 2.119 GeV\n-> Beam kinetic energy = 1.181 GeV\n-> Beam rigidity = 6.333 Tm\n-> Relativistic beta = 0.89663\n-> Relativistic gamma = 2.258\n-> Geometrical x emittance = 2.469 mm mrad\n-> Geometrical y emittance = 2.469 mm mrad",
      "names": [],
      "example": {
        "document": "api/optics",
        "ref_id": "beam-optics",
        "headings": [
          "Optics",
          "Beam Optics",
          "Example"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": ">>> geom_emit_x = madx.globals[\"geometric_emit_x\"]\n>>> geom_emit_y = madx.globals[\"geometric_emit_y\"]\n>>> twiss_tfs = madx.twiss(ripken=True).dframe()\n>>> horizontal_size = lebedev_beam_size(\n        twiss_tfs.beta11, twiss_tfs.beta21, geom_emit_x, geom_emit_y\n    )\n>>> vertical_size = lebedev_beam_size(\n        twiss_tfs.beta12, twiss_tfs.beta22, geom_emit_x, geom_emit_y\n    )",
      "names": [],
      "example": {
        "document": "api/optics",
        "ref_id": "ripken-parameters",
        "headings": [
          "Optics",
          "Beam Optics",
          "Ripken Parameters",
          "Example"
        ]
      },
      "doc_lineno": 25
    },
    {
      "source": ">>> alfx = madx.table.twiss.alfx[0]\n>>> betx = madx.table.twiss.betx[0]\n>>> u = np.array([x_coords, px_coord])\n>>> u_bar = courant_snyder_transform(u, alfx, betx)",
      "names": [],
      "example": {
        "document": "api/optics",
        "ref_id": "twiss-optics",
        "headings": [
          "Optics",
          "Beam Optics",
          "Ripken Parameters",
          "Twiss Optics",
          "Example"
        ]
      },
      "doc_lineno": 27
    }
  ],
  "api/plotting": [
    {
      "source": ">>> plt.figure(figsize=(16, 11))\n>>> plot_aperture(\n...     madx, plot_bpms=True,\n...     aperture_ylim=(0, 20),\n...     k0l_lim=(-4e-4, 4e-4),\n...     k1l_lim=(-0.08, 0.08),\n...     color=\"darkslateblue\",\n... )",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "aperture-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example"
        ]
      },
      "doc_lineno": 98
    },
    {
      "source": ">>> fig, ax = plt.subplots(figsize=(10, 9))\n>>> plot_physical_apertures(madx, \"x\")\n>>> plt.show()",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "aperture-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 45
    },
    {
      "source": ">>> fig, ax = plt.subplots(figsize=(10, 9))\n>>> plot_physical_apertures(madx, \"x\", scale=1e3)\n>>> plt.setp(ax, xlabel=\"S [m]\", ylabel=\"X [mm]\")\n>>> plt.show()",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "aperture-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 53
    },
    {
      "source": ">>> plot_single_ir_crossing(\n...     plt.gca(), b1_df, b2_df, plot_column=\"x\", scaling=1e3, ylabel=\"Orbit X $[mm]$\"\n... )",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "crossing-scheme-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example"
        ]
      },
      "doc_lineno": 30
    },
    {
      "source": ">>> plt.figure(figsize=(18, 12))\n>>> plot_two_lhc_ips_crossings(madx, first_ip=1, second_ip=5)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "crossing-scheme-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 39
    },
    {
      "source": ">>> plt.figure(figsize=(16, 11))\n>>> plot_two_lhc_ips_crossings(madx, first_ip=2, second_ip=8, highlight_mqx_and_mbx=False)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "crossing-scheme-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 44
    },
    {
      "source": ">>> fig, ax = plt.subplots(figsize=(10, 9))\n>>> plot_beam_envelope(madx, \"lhcb1\", \"x\", nsigma=3)\n>>> plt.show()",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "beam-enveloppe-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Examples"
        ]
      },
      "doc_lineno": 46
    },
    {
      "source": ">>> fig, ax = plt.subplots(figsize=(10, 9))\n>>> plot_beam_envelope(madx, \"lhcb1\", \"x\", nsigma=3, scale=1e3)\n>>> plt.setp(ax, xlabel=\"S [m]\", ylabel=\"X [mm]\")\n>>> plt.show()",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "beam-enveloppe-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Examples"
        ]
      },
      "doc_lineno": 54
    },
    {
      "source": ">>> title = \"Machine Layout\"\n>>> plt.figure(figsize=(16, 11))\n>>> plot_latwiss(\n...     madx,\n...     title=title,\n...     k0l_lim=(-0.15, 0.15),\n...     k1l_lim=(-0.08, 0.08),\n...     disp_ylim=(-10, 125),\n...     lw=3,\n... )",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "lattice-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example"
        ]
      },
      "doc_lineno": 84
    },
    {
      "source": ">>> title = \"Machine Layout\"\n>>> plt.figure(figsize=(16, 11))\n>>> plot_latwiss(\n...     madx,\n...     title=title,\n...     k0l_lim=0.15,  # identical to k0l_lim=(-0.15, 0.15)\n...     k1l_lim=0.08,  # identical to k1l_lim=(-0.08, 0.08)\n...     disp_ylim=(-10, 125),\n...     lw=3,\n... )",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "lattice-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example"
        ]
      },
      "doc_lineno": 99
    },
    {
      "source": ">>> fig, ax = plt.subplots(figsize=(6, 6))\n>>> plot_machine_survey(\n...     madx, title=\"Machine Survey\", show_elements=True, high_orders=True\n... )",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "lattice-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 26
    },
    {
      "source": ">>> fig, ax = plt.subplots(figsize=(6, 2))\n>>> plot_machine_layout(madx, title=\"Machine Elements\", lw=3)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "layout-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example"
        ]
      },
      "doc_lineno": 100
    },
    {
      "source": ">>> fig, ax = plt.subplots(figsize=(6, 2))\n>>> plot_machine_layout(madx, title=\"Machine Elements\", lw=3)\n>>> scale_patches(ax=fig.axes[0], scale=100, ylabel=r\"$K_{1}L$ $[10^{-2} m^{-1}]$\")",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "layout-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 17
    },
    {
      "source": ">>> fig, ax = plt.subplots(figsize=(10, 9))\n>>> plot_courant_snyder_phase_space(madx, x_coords, px_coords, plane=\"Horizontal\")",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "phase-space-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": ">>> fig, ax = plt.subplots(figsize=(10, 9))\n>>> plot_courant_snyder_phase_space_colored(madx, x_coords, px_coords, plane=\"Horizontal\")",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "phase-space-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 32
    },
    {
      "source": ">>> fig, ax = plt.subplots(figsize=(6, 6))\n>>> plot_resonance_lines_for_order(order=3, axis=ax, color=\"blue\")",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "tune-diagram-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example"
        ]
      },
      "doc_lineno": 15
    },
    {
      "source": ">>> fig, ax = plt.subplots(figsize=(6, 6))\n>>> plot_tune_diagram(ax=ax, max_order=4, differentiate_orders=True)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "tune-diagram-plotters",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 33
    },
    {
      "source": ">>> fig = plot_full_ip_rdt(\n...     couple_b1_tfs,\n...     couple_b2_tfs,\n...     b1_model_tfs,\n...     b2_model_tfs,\n...     ip=1,\n...     figsize=(18, 9),\n...     abs_ylimits=(5e-3, 6.5e-2),\n...     real_ylimits=(-1e-1, 1e-1),\n...     imag_ylimits=(-1e-1, 1e-1),\n... )",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "segment-by-segment-coupling",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Segment-by-Segment Coupling",
          "Example"
        ]
      },
      "doc_lineno": 32
    },
    {
      "source": ">>> fig = plot_rdt_component(\n...     b1_segment_df=tfs.read(\"B1/sbscouple_IP1.out\"),\n...     b2_segment_df=tfs.read(\"B2/sbscouple_IP1.out\"),\n...     b1_model=b1_model_tfs,\n...     b2_model=b2_model_tfs,\n...     ip=1,\n...     figsize=(8, 8),\n...     b1_ylabel=r\"$\\mathrm{Beam\\ 1}$ $|f_{1001}|$\",\n...     b2_ylabel=r\"$\\mathrm{Beam\\ 2}$ $|f_{1001}|$\",\n... )",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "segment-by-segment-coupling",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Segment-by-Segment Coupling",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 37
    },
    {
      "source": ">>> plot_phase_segment(ax, segment_df b1_model_tfs, plane=\"x\", ip=1)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "segment-by-segment-phase",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Segment-by-Segment Coupling",
          "Example",
          "Segment-by-Segment Phase",
          "Example"
        ]
      },
      "doc_lineno": 25
    },
    {
      "source": ">>> fig = plot_phase_segment_both_beams(\n...     phasex_b1_tfs,\n...     phasey_b1_tfs,\n...     phasex_b2_tfs,\n...     phasey_b2_tfs,\n...     b1_model_tfs,\n...     b2_model_tfs,\n...     ip=1,\n...     figsize=(18, 9),\n...     bbox_to_anchor=(0.535, 0.94),\n... )",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "segment-by-segment-phase",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Segment-by-Segment Coupling",
          "Example",
          "Segment-by-Segment Phase",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 35
    },
    {
      "source": ">>> fig = plot_phase_segment_one_beam(\n...     sbs_phasex, sbs_phasey, model=b2_model_tfs, ip=5, figsize=(8, 8)\n... )",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "segment-by-segment-phase",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Segment-by-Segment Coupling",
          "Example",
          "Segment-by-Segment Phase",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 26
    },
    {
      "source": ">>> x = np.random.normal(size=1000)\n>>> y = np.random.normal(size=1000)\n>>> plt.plot(x, y, \".\", markersize=0.8)\n>>> draw_confidence_ellipse(x, y, n_std=2.5, edgecolor=\"red\")",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Segment-by-Segment Coupling",
          "Example",
          "Segment-by-Segment Phase",
          "Example",
          "Example",
          "Plotting Utility Functions",
          "Example"
        ]
      },
      "doc_lineno": 26
    },
    {
      "source": ">>> twiss_df = tfs.read(\"twiss_output.tfs\", index=\"NAME\")\n>>> twiss_df.plot(x=\"S\", y=[\"BETX\", \"BETY\"])\n>>> ips = get_lhc_ips_positions(twiss_df)\n>>> draw_ip_locations(ip_positions=ips)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Segment-by-Segment Coupling",
          "Example",
          "Segment-by-Segment Phase",
          "Example",
          "Example",
          "Plotting Utility Functions",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> ip_offset_in_segment = find_ip_s_from_segment_start(\n...     segment_df=sbsphaseext_IP1, model_df=twiss_elements, ip=1\n... )",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Segment-by-Segment Coupling",
          "Example",
          "Segment-by-Segment Phase",
          "Example",
          "Example",
          "Plotting Utility Functions",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 16
    },
    {
      "source": ">>> twiss_df = tfs.read(\"twiss_output.tfs\", index=\"NAME\")\n>>> ips = get_lhc_ips_positions(twiss_df)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Segment-by-Segment Coupling",
          "Example",
          "Segment-by-Segment Phase",
          "Example",
          "Example",
          "Plotting Utility Functions",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": ">>> element_dfs = make_elements_groups(madx)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Segment-by-Segment Coupling",
          "Example",
          "Segment-by-Segment Phase",
          "Example",
          "Example",
          "Plotting Utility Functions",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": ">>> survey_dfs = make_survey_groups(madx)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Segment-by-Segment Coupling",
          "Example",
          "Segment-by-Segment Phase",
          "Example",
          "Example",
          "Plotting Utility Functions",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": ">>> def my_plotting_function(*args, **kwargs):\n...     ax, kwargs = maybe_get_ax(**kwargs)\n...     # do stuff with ax\n...     ax.plot(*args, **kwargs)\n... )",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Segment-by-Segment Coupling",
          "Example",
          "Segment-by-Segment Phase",
          "Example",
          "Example",
          "Plotting Utility Functions",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> set_arrow_label(\n...     label=\"Your label\",\n...     arrow_position=(1, 2),\n...     label_position=(1.1 * some_value, 0.75 * another_value),\n...     color=\"indianred\",\n...     arrow_arc_rad=0.3,\n...     fontsize=25,\n... )",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Aperture Plotters",
          "Example",
          "Crossing Scheme Plotters",
          "Example",
          "Beam Enveloppe Plotters",
          "Lattice Plotters",
          "Example",
          "Layout Plotters",
          "Example",
          "Phase Space Plotters",
          "Example",
          "Tune Diagram Plotters",
          "Example",
          "Segment-by-Segment Coupling",
          "Example",
          "Segment-by-Segment Phase",
          "Example",
          "Example",
          "Plotting Utility Functions",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 30
    }
  ],
  "api/utils": [
    {
      "source": ">>> CommandLine.check_pid_exists(os.getpid())\nTrue",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "command-line-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example"
        ]
      },
      "doc_lineno": 12
    },
    {
      "source": ">>> CommandLine.run(\"echo hello\")\n(0, b\"hello\\r\\n\")",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "command-line-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 34
    },
    {
      "source": ">>> import os\n>>> modified_env = os.environ.copy()\n>>> modified_env[\"ENV_VAR\"] = \"new_value\"\n>>> CommandLine.run(\"echo $ENV_VAR\", env=modified_env)\n(0, b\"new_value\")",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "command-line-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 39
    },
    {
      "source": ">>> CommandLine.terminate(500_000)  # max PID is 32768 (99999) on linux (macOS).\nFalse",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "command-line-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 13
    },
    {
      "source": ">>> with timeit(lambda spanned: logger.debug(f\"Did some stuff in {spanned} seconds\")):\n...     some_stuff()\n...     some_other_stuff()",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "context-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Example"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": ">>> Processor = MultiProcessor()\n>>> results_one_tuple_per_run = Processor.execute_function(\n...     func=your_cpu_heavy_function,\n...     func_args=list_of_args_for_each_call,\n...     n_processes=some_int_up_to_you,\n... )",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "executors-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example"
        ]
      },
      "doc_lineno": 11
    },
    {
      "source": ">>> MultiProcessor.execute_function(\n...     func=np.square, func_args=list(range(6)), n_processes=2)\n... )\n[0, 1, 4, 9, 16, 25]",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "executors-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 24
    },
    {
      "source": ">>> Threader = MultiThreader()\n>>> results_one_tuple_per_run = Threader.execute_function(\n...     func=your_io_heavy_function,\n...     func_args=list_of_args_for_each_call,\n...     n_processes=some_int_up_to_you,\n... )",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "executors-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 10
    },
    {
      "source": ">>> MultiThreader.execute_function(\n...     func=np.square, func_args=list(range(6)), n_processes=2)\n... )\n[0, 1, 4, 9, 16, 25]",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "executors-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 29
    },
    {
      "source": ">>> condor_q_output = get_the_string_as_you_wish(...)\n>>> tasks, cluster = read_condor_q(condor_q_output)",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "htcondor-monitoring",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Example"
        ]
      },
      "doc_lineno": 16
    },
    {
      "source": ">>> config_logger(level=\"DEBUG\")",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "logging-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Example"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": ">>> from pyhdtoolkit.utils.logging import config_logger, SIMPLE_FORMAT\n>>> config_logger(level=\"DEBUG\", format=SIMPLE_FORMAT)",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "logging-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Example"
        ]
      },
      "doc_lineno": 26
    },
    {
      "source": ">>> df = add_noise_to_arc_bpms(df, min_index=8, stdev=1e-6, columns=[\"DPSI\"])",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "miscellanous-personnal-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": ">>> df = add_noise_to_ir_bpms(df, max_index=5, stdev=1e-6, columns=[\"DPSI\"])",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "miscellanous-personnal-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 24
    },
    {
      "source": ">>> apply_colin_corrs_balance(madx)",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "miscellanous-personnal-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": ">>> get_betastar_from_opticsfile(\n...     \"acc-models-lhc/strengths/ATS_Nominal/2022/squeeze/ats_30cm.madx\"\n... )\n0.3",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "miscellanous-personnal-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 22
    },
    {
      "source": ">>> log_runtime_versions()\n2022-10-05 15:06:26 | CRITICAL | pyhdtoolkit.utils._misc:39 - Using: pyhdtoolkit 1.0.0rc0 | cpymad 1.10.0  | MAD-X 5.08.01 (2022.02.25)",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "miscellanous-personnal-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 7
    },
    {
      "source": ">>> df = split_complex_columns(df, drop=True)",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "miscellanous-personnal-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 15
    },
    {
      "source": ">>> ListOperations.all_unique([1, 2, 3, 5, 12, 0])\nTrue",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example"
        ]
      },
      "doc_lineno": 12
    },
    {
      "source": ">>> ListOperations.average_by(\n...   [{'n': 4}, {'n': 2}, {'n': 8}, {'n': 6}], lambda x: x['n']\n... )\n5.0",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 16
    },
    {
      "source": ">>> ListOperations.bifurcate(['beep', 'boop', 'foo', 'bar'], [True, True, False, True])\n[['beep', 'boop', 'bar'], ['foo']]",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 17
    },
    {
      "source": ">>> ListOperations.bifurcate_by(list(range(5)), lambda x: x % 2 == 0)\n[[0, 2, 4], [1, 3]]",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": ">>> ListOperations.chunk_list(list(range(10)), 3)\n[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> ListOperations.deep_flatten([[\"a\", \"b\"], [1, 2], None, [True, False]])\n[\"a\", \"b\", 1, 2, None True, False]",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 12
    },
    {
      "source": ">>> ListOperations.eval_none([0, 0, 1, 0], lambda x: x >= 2)\nTrue",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> ListOperations.eval_none([0, 1, 2, 0], lambda x: x >= 2)\nFalse",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 23
    },
    {
      "source": ">>> ListOperations.eval_some([0, 1, 2, 0], lambda x: x >= 2)\nTrue",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 17
    },
    {
      "source": ">>> ListOperations.eval_some([0, 0, 1, 0], lambda x: x >= 2)\nFalse",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 22
    },
    {
      "source": ">>> ListOperations.get_indices(0, [0, 1, 3, 5, 7, 3, 9, 0, 0, 5, 3, 2])\n[0, 7, 8]",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 16
    },
    {
      "source": ">>> ListOperations.group_by(list(range(5)), lambda x: x % 2 == 0)\n{True: [0, 2, 4], False: [1, 3]}",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> ListOperations.has_duplicates([1, 2, 1])\nTrue",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": ">>> ListOperations.sample([\"a\", \"b\", 1, 2, False])\n2",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 13
    },
    {
      "source": ">>> ListOperations.sanitize_list([1, False, \"a\", 2, \"\", None, 6, 0])\n[1, \"a\", 2, 6]",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 13
    },
    {
      "source": ">>> ListOperations.shuffle([\"a\", \"b\", 1, 2, False])\n['b', 1, False, 2, 'a']",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 15
    },
    {
      "source": ">>> ListOperations.spread([list(range(5)), list(range(5))])\n[0, 1, 2, 3, 4, 0, 1, 2, 3, 4]",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> ListOperations.symmetric_difference_by([2.1, 1.2], [2.3, 3.4], math.floor)\n[1.2, 3.4]",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": ">>> ListOperations.symmetric_difference_by([2.1, 1.2], [0.5, 1.2], lambda x: x >= 2)\n[2.1]",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 25
    },
    {
      "source": ">>> ListOperations.union_by([2.1], [1.2, 2.3], math.floor)\n[1.2, 2.1]",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": ">>> ListOperations.zipper([1, 2, 3], [2, 5, 3, 7], [\"a\", \"b\", \"c\"])\n[[1, 2, 'a'], [2, 5, 'b'], [3, 3, 'c'], [None, 7, None]]",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": ">>> MiscellaneousOperations.longest_item(\n...     list(range(5)), list(range(100)), list(range(50))\n... )\nlist(range(100))",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 13
    },
    {
      "source": ">>> MiscellaneousOperations.map_values(\n...     {\"a\": list(range(5)), \"b\": list(range(10)), \"c\": list(range(15))},\n...     lambda x: len(x)\n... )\n{\"a\": 5, \"b\": 10, \"c\": 15}",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 17
    },
    {
      "source": ">>> NumberOperations.clamp_number(17, 4, 5)\n5",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> NumberOperations.clamp_number(23, 20, 30)\n23",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 23
    },
    {
      "source": ">>> NumberOperations.degrees_to_radians(160)\n2.792526803190927",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 15
    },
    {
      "source": ">>> NumberOperations.degrees_to_radians(360, decompose=True)\n(2, \"pi\", \"rad\")",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": ">>> NumberOperations.greatest_common_divisor([54, 24])\n6",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": ">>> NumberOperations.greatest_common_divisor([30, 132, 378, 582, 738])\n6",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": ">>> NumberOperations.is_divisible_by(35, 15)\nFalse",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 15
    },
    {
      "source": ">>> NumberOperations.least_common_multiple(4, 5)\n20",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": ">>> NumberOperations.least_common_multiple(2, 5, 17, 632)\n53720",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": ">>> NumberOperations.radians_to_degrees(2* math.pi)\n360",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 13
    },
    {
      "source": ">>> NumberOperations.radians_to_degrees(2.710)\n155.2715624804531",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> StringOperations.camel_case(\"a_snake_case_name\")\n\"aSnakeCaseName\"",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 13
    },
    {
      "source": ">>> StringOperations.camel_case(\"A Title Case Name\")\n\"aTitleCaseName\"",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> StringOperations.capitalize(\"astringtocapitalize\")\n\"Astringtocapitalize\"",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 16
    },
    {
      "source": ">>> StringOperations.capitalize(\"astRIngTocApItalizE\", lower_rest=True)\n\"Astringtocapitalize\"",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 21
    },
    {
      "source": ">>> StringOperations.is_anagram(\"Tom Marvolo Riddle\", \"I am Lord Voldemort\")\nTrue",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> StringOperations.is_anagram(\"A first string\", \"Definitely not an anagram\")\nFalse",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 23
    },
    {
      "source": ">>> StringOperations.is_palindrome(\"racecar\")\nTrue",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": ">>> StringOperations.is_palindrome(\"definitelynot\")\nFalse",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": ">>> StringOperations.kebab_case(\"camel Case\")\n\"camel-case\"",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 13
    },
    {
      "source": ">>> StringOperations.kebab_case(\"snake_case\")\n\"snake-case\"",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> StringOperations.snake_case(\"A bunch of words\")\n\"a_bunch_of_words\"",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 13
    },
    {
      "source": ">>> StringOperations.snake_case(\"camelCase\")\n\"camelcase\"",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "operations-utilities",
        "headings": [
          "Utils",
          "Command Line Utilities",
          "Example",
          "Examples",
          "Context Utilities",
          "Executors Utilities",
          "Example",
          "Example",
          "Example",
          "HTCondor Monitoring",
          "Logging Utilities",
          "Miscellanous Personnal Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Operations Utilities",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 18
    }
  ],
  "bibliography": [],
  "contributing": [
    {
      "source": ">>> import pyhdtoolkit\n>>> print(pyhdtoolkit.version.version_info())\n    PyhDToolkit version: 0.21.0\n           Install path: /Users/felixsoubelet/Repositories/Work/PyhDToolkit/pyhdtoolkit\n         Python version: 3.10.6\n  Python implementation: 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:41:54) [Clang 13.0.1 ]\n               Platform: macOS-12.5.1-x86_64-i386-64bit",
      "names": [],
      "example": {
        "document": "contributing",
        "ref_id": "bug-reports",
        "headings": [
          "Contributing",
          "Bug Reports"
        ]
      },
      "doc_lineno": 34
    }
  ],
  "gallery/demo_acd_tracking_spectra": [
    {
      "source": ">>> qxd = spectrum.tunes[spectrum.horizontal == spectrum.horizontal.max()].to_numpy()[0]\n>>> qyd = spectrum.tunes[spectrum.vertical == spectrum.vertical.max()].to_numpy()[0]",
      "names": [],
      "example": {
        "document": "gallery/demo_acd_tracking_spectra",
        "ref_id": "ac-dipole-driven-tracking-spectrum",
        "headings": [
          "AC Dipole Driven Tracking Spectrum"
        ]
      },
      "doc_lineno": 242
    }
  ],
  "gallery/demo_aperture": [],
  "gallery/demo_beam_enveloppe": [],
  "gallery/demo_ir_errors": [],
  "gallery/demo_lattice": [],
  "gallery/demo_lhc_crossing_schemes": [],
  "gallery/demo_lhc_rigid_waist_shift": [],
  "gallery/demo_lhc_setup": [],
  "gallery/demo_machine_survey": [],
  "gallery/demo_phase_space": [],
  "gallery/demo_sbs_plotting": [],
  "gallery/demo_stats_fitting": [],
  "gallery/demo_track_spectra": [
    {
      "source": "qx = tracks.tunes[tracks.horizontal == tracks.horizontal.max()].to_numpy()[0]\nqy = tracks.tunes[tracks.vertical == tracks.vertical.max()].to_numpy()[0]",
      "names": [],
      "example": {
        "document": "gallery/demo_track_spectra",
        "ref_id": "free-tracking-spectrum",
        "headings": [
          "Free Tracking Spectrum"
        ]
      },
      "doc_lineno": 405
    }
  ],
  "gallery/demo_tune_diagram": [],
  "gallery/index": [],
  "gallery/sg_execution_times": [],
  "index": [],
  "quickstart": [],
  "release": [],
  "releases/v0.10.0": [],
  "releases/v0.11.0": [],
  "releases/v0.12.0": [],
  "releases/v0.13.0": [],
  "releases/v0.13.1": [],
  "releases/v0.13.2": [],
  "releases/v0.13.3": [],
  "releases/v0.14.0": [],
  "releases/v0.14.1": [],
  "releases/v0.15.0": [],
  "releases/v0.15.1": [],
  "releases/v0.16.0": [],
  "releases/v0.16.1": [],
  "releases/v0.17.0": [],
  "releases/v0.18.0": [],
  "releases/v0.19.0": [],
  "releases/v0.19.1": [],
  "releases/v0.2.0": [],
  "releases/v0.2.1": [],
  "releases/v0.20.0": [],
  "releases/v0.20.1": [],
  "releases/v0.21.0": [],
  "releases/v0.3.0": [],
  "releases/v0.4.0": [],
  "releases/v0.4.1": [],
  "releases/v0.5.0": [],
  "releases/v0.6.0": [],
  "releases/v0.7.0": [],
  "releases/v0.8.0": [],
  "releases/v0.8.1": [],
  "releases/v0.8.2": [],
  "releases/v0.8.3": [],
  "releases/v0.8.4": [],
  "releases/v0.8.5": [],
  "releases/v0.9.0": [],
  "releases/v0.9.1": [],
  "releases/v0.9.2": [],
  "releases/v1.0.0": [],
  "releases/v1.1.0": [],
  "releases/v1.1.1": [],
  "releases/v1.2.0": [],
  "releases/v1.3.0": [],
  "releases/v1.3.1": [],
  "releases/v1.3.2": [],
  "releases/v1.4.0": []
}