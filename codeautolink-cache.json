{
  "api": [],
  "api/cpymadtools": [
    {
      "source": "# Say we have set the LHC coupling knobs to 1e-3\ndqmin = get_closest_tune_approach(\n    madx,\n    \"lhc\",  # will find the knobs automatically\n    sequence=\"lhcb1\",\n    telescopic_squeeze=True,  # influences the knobs definition\n    run3=True,  # influences the knobs definition (LHC Run 3)\n)\n# returns 0.001",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "betatron-coupling-utilities",
        "headings": [
          "Cpymadtools",
          "Example"
        ]
      },
      "doc_lineno": 45
    },
    {
      "source": "complex_cminus = get_cminus_from_coupling_rdts(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "betatron-coupling-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 46
    },
    {
      "source": "complex_cminus = get_cminus_from_coupling_rdts(madx, patterns=[\"^BPM.*B[12]$\"])",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "betatron-coupling-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 52
    },
    {
      "source": "twiss_rdts = get_coupling_rdts(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "betatron-coupling-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 16
    },
    {
      "source": "match_no_coupling_through_ripkens(\n    madx, sequence=\"lhcb1\", location=\"IP5\", vary_knobs=[\"kqsx.3l5\", \"kqsx.3r5\"]\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "betatron-coupling-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 21
    },
    {
      "source": "from pyhdtoolkit.cpymadtools.lhc import LHCSetup\n# use this now",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "LHC-Specific Utilities"
        ]
      },
      "doc_lineno": 22
    },
    {
      "source": "from pyhdtoolkit.cpymadtools.lhc._setup import LHCSetup\n# use this now",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "LHC-Specific Utilities"
        ]
      },
      "doc_lineno": 29
    },
    {
      "source": "twiss_with_rdts = get_lhc_bpms_twiss_and_rdts(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 16
    },
    {
      "source": "add_markers_around_lhc_ip(\n    madx, sequence=f\"lhcb1\", ip=1, n_markers=1000, interval=0.001\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 38
    },
    {
      "source": "install_ac_dipole_as_kicker(\n    madx,\n    deltaqx=-0.01,  # driven horizontal tune to Qxd = 62.31 - 0.01 = 62.30\n    deltaqy=0.012,  # driven vertical tune to Qyd = 60.32 + 0.012 = 60.332\n    sigma_x=2,  # bunch amplitude kick in the horizontal plane\n    sigma_y=2,  # bunch amplitude kick in the vertical plane\n    beam=1,  # beam for which to install and kick\n    start_turn=100,  # when to turn on the AC Dipole\n    ramp_turns=2000,  # how many turns to ramp up/down the AC Dipole\n    top_turns=6600,  # how many turns to keep the AC Dipole at full kick\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 70
    },
    {
      "source": "install_ac_dipole_as_matrix(madx, deltaqx=-0.01, deltaqy=0.012, beam=1)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 49
    },
    {
      "source": "misalign_lhc_ir_quadrupoles(\n    madx, ips=[1], quadrupoles=[1, 2, 3, 4, 5, 6], beam=1, sides=\"RL\", dx=\"1E-5\"\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 48
    },
    {
      "source": "misalign_lhc_ir_quadrupoles(\n    madx,\n    ips=[5],\n    quadrupoles=[7, 8, 9, 10],\n    beam=1,\n    sides=\"RL\",\n    dpsi=\"1E-3 + 8E-4 * TGAUSS(2.5)\",\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 56
    },
    {
      "source": "misalign_lhc_ir_quadrupoles(\n    madx,\n    ips=[1, 5],\n    quadrupoles=list(range(1, 11)),\n    beam=1,\n    sides=\"RL\",\n    dy=1e-5,  # ok too as cpymad converts this to a string first\n    dpsi=\"1E-3 + 8E-4 * TGAUSS(2.5)\",\n)",
      "names": [
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "list"
          ],
          "code_str": "list",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "list"
        }
      ],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 69
    },
    {
      "source": "misalign_lhc_triplets(madx, ip=1, sides=\"RL\", dx=\"1E-5 * TGAUSS(2.5)\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 26
    },
    {
      "source": "misalign_lhc_triplets(madx, ip=5, sides=\"RL\", dpsi=\"0.001 * TGAUSS(2.5)\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 32
    },
    {
      "source": "observation_bpms = get_lhc_bpms_list(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": "get_lhc_tune_and_chroma_knobs(\"LHC\", beam=1, telescopic_squeeze=False)\n# gives ('dQx.b1', 'dQy.b1', 'dQpx.b1', 'dQpy.b1')",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 23
    },
    {
      "source": "get_lhc_tune_and_chroma_knobs(\"LHC\", beam=2, run3=True)\n# gives ('dQx.b2_op', 'dQx.b2_op', 'dQpx.b2_op', 'dQpx.b2_op')",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": "get_lhc_tune_and_chroma_knobs(\"HLLHC\", beam=2)\n# gives ('kqtf.b2_sq', 'kqtd.b2_sq', 'ksf.b2_sq', 'ksd.b2_sq')",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 33
    },
    {
      "source": "ip5_x, ip5_y = get_size_at_ip(madx, ip=5)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 22
    },
    {
      "source": "make_sixtrack_output(madx, energy=6800)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 13
    },
    {
      "source": "reset_lhc_bump_flags(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 10
    },
    {
      "source": "apply_lhc_colinearity_knob(madx, colinearity_knob_value=5, ir=1)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 29
    },
    {
      "source": "apply_lhc_colinearity_knob_delta(madx, colinearity_knob_delta=3.5, ir=1)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 24
    },
    {
      "source": "apply_lhc_coupling_knob(madx, coupling_knob=5e-4, beam=1)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": "# It is recommended to re-match tunes after this routine\nmatching.match_tunes(madx, \"lhc\", \"lhcb1\", 62.27, 60.36)\napply_lhc_rigidity_waist_shift_knob(madx, rigidty_waist_shift_value=1.5, ir=5)\nmatching.match_tunes(madx, \"lhc\", \"lhcb1\", 62.31, 60.32)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 40
    },
    {
      "source": "carry_colinearity_knob_over(madx, ir=5, to_left=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": "deactivate_lhc_arc_sextupoles(madx, beam=1)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 12
    },
    {
      "source": "power_landau_octupoles(madx, beam=1, mo_current=350, defect_arc=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 17
    },
    {
      "source": "random_kwargs = {}\nfor order in range(1, 16):\n    for ab in \"AB\":\n        random_kwargs[f\"{ab}{order:d}\"] = random.randint(0, 20)\nswitch_magnetic_errors(madx, **random_kwargs)",
      "names": [
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "range"
        }
      ],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": "switch_magnetic_errors(madx, **{\"B6\": 1e-4})",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 30
    },
    {
      "source": "vary_independent_ir_quadrupoles(\n    madx, quad_numbers=[10, 11, 12, 13], ip=1, sides=(\"r\", \"l\")\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": "orbit_setup = get_current_orbit_setup(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": "sextupoles_powering = get_magnets_powering(madx, patterns=[r\"^ms\\.\"])",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 45
    },
    {
      "source": "arc_knobs = query_arc_correctors_powering(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": "triplet_knobs = query_triplet_correctors_powering(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": "correct_lhc_global_coupling(madx, sequence=\"lhcb1\", telescopic_squeeze=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 27
    },
    {
      "source": "correct_lhc_orbit(madx, sequence=\"lhcb1\", plane=\"y\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 24
    },
    {
      "source": "tune_results = do_kmodulation(\n    madx, ir=1, side=\"right\", steps=100, stepsize=3e-8\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 39
    },
    {
      "source": "with LHCSetup(run=2, opticsfile=\"2018/PROTON/opticsfile.22\", beam=2) as madx:\n    pass  # do some stuff",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 59
    },
    {
      "source": "with LHCSetup(\n    run=3,\n    opticsfile=\"R2022a_A30cmC30cmA10mL200cm.madx\",\n    slicefactor=4,\n    stdout=False,\n) as madx:\n    pass  # do some stuff",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 66
    },
    {
      "source": "variables, specials = lhc_orbit_variables()",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 12
    },
    {
      "source": "make_lhc_beams(madx, energy=6800, nemitt_x=2.75e-6, nemitt_y=3e-6)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 26
    },
    {
      "source": "make_lhc_beams(madx, energy=6800, nemitt_x=3e-6, nemitt_y=3e-6, b4=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 33
    },
    {
      "source": "make_lhc_thin(madx, sequence=\"lhcb1\", slicefactor=4)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 25
    },
    {
      "source": "madx = prepare_lhc_run2(\n    \"/afs/cern.ch/eng/lhc/optics/runII/2018/PROTON/opticsfile.22\",\n    beam=2,\n    stdout=True,\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 46
    },
    {
      "source": "madx = prepare_lhc_run3(\n    \"R2022a_A30cmC30cmA10mL200cm.madx\", slicefactor=4, stdout=True\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 45
    },
    {
      "source": "re_cycle_sequence(madx, sequence=\"lhcb1\", start=\"MSIA.EXIT.B1\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": "orbit_setup = setup_lhc_orbit(madx, scheme=\"lhc_top\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 21
    },
    {
      "source": "ips_df = get_ips_twiss(madx, chrom=True, ripken=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": "ir_df = get_ir_twiss(madx, chrom=True, ripken=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "lhc-specific-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 23
    },
    {
      "source": "matching.match_chromaticities(\n    madx,\n    None,  # this is not LHC or HLLHC\n    sequence=\"CAS3\",\n    dq1_target=100,\n    dq2_target=100,\n    varied_knobs=[\"ksf\", \"ksd\"],  # only chroma knobs\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 50
    },
    {
      "source": "matching.match_tunes_and_chromaticities(\n    madx,\n    dq1_target=100,\n    dq2_target=100,\n    varied_knobs=[\"ksf\", \"ksd\"],  # only chroma knobs\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 65
    },
    {
      "source": "matching.match_chromaticities(\n    madx,\n    \"lhc\",  # will find the knobs automatically\n    sequence=\"lhcb1\",\n    dq1_target=2.0,\n    dq2_target=2.0,\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 77
    },
    {
      "source": "matching.match_tunes(\n    madx,\n    None,  # this is not LHC or HLLHC\n    sequence=\"CAS3\",\n    q1_target=6.335,\n    q2_target=6.29,\n    varied_knobs=[\"kqf\", \"kqd\"],  # only tune knobs\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 50
    },
    {
      "source": "matching.match_tunes_and_chromaticities(\n    madx,\n    q1_target=6.335,\n    q2_target=6.29,\n    varied_knobs=[\"kqf\", \"kqd\"],  # only tune knobs\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 65
    },
    {
      "source": "matching.match_tunes(\n    madx,\n    \"lhc\",  # will find the knobs automatically\n    sequence=\"lhcb1\",\n    q1_target=62.31,\n    q2_target=60.32,\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 77
    },
    {
      "source": "matching.match_tunes_and_chromaticities(\n    madx,\n    None,  # this is not LHC or HLLHC\n    sequence=\"CAS3\",\n    q1_target=6.335,\n    q2_target=6.29,\n    dq1_target=100,\n    dq2_target=100,\n    varied_knobs=[\"kqf\", \"kqd\", \"ksf\", \"ksd\"],\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 89
    },
    {
      "source": "matching.match_tunes_and_chromaticities(\n    madx,\n    q1_target=6.335,\n    q2_target=6.29,\n    dq1_target=100,\n    dq2_target=100,\n    varied_knobs=[\"kqf\", \"kqd\", \"ksf\", \"ksd\"],\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 106
    },
    {
      "source": "matching.match_tunes_and_chromaticities(\n    madx,\n    \"lhc\",  # will find the knobs automatically\n    sequence=\"lhcb1\",\n    q1_target=62.31,\n    q2_target=60.32,\n    dq1_target=2.0,\n    dq2_target=2.0,\n    run3=True,  # influences the knobs definition\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "matching-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 120
    },
    {
      "source": "beam_parameters = query_beam_attributes(madx)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "beam-parameters",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 15
    },
    {
      "source": "ampdet_coeffs = get_amplitude_detuning(madx, order=2, closedorbit=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 48
    },
    {
      "source": "tracks_dict = get_amplitude_detuning(\n    madx, order=3, model=3, exact=True, icase=5, no=6\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 55
    },
    {
      "source": "rdts_df = get_rdts(madx, order=3, fringe=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 47
    },
    {
      "source": "tracks_dict = get_rdts(\n    madx, order=3, model=3, method=6, nst=3, exact=True, icase=5\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 54
    },
    {
      "source": "tracks_dict = ptc_track_particle(\n    madx, nturns=1023, initial_coordinates=(2e-4, 0, 1e-4, 0, 0, 0)\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 71
    },
    {
      "source": "tracks_dict = ptc_track_particle(\n    madx,\n    nturns=10,\n    initial_coordinates=(2e-4, 0, 1e-4, 0, 0, 0),\n    model=3,\n    method=6,\n    nst=3,\n    exact=True,\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 79
    },
    {
      "source": "twiss_ptc_df = ptc_twiss(madx, order=3)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 50
    },
    {
      "source": "tracks_dict = ptc_twiss(\n    madx, order=3, model=3, method=6, nst=3, exact=True, icase=5\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "ptc-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 57
    },
    {
      "source": "tracks_dict = track_single_particle(\n    madx, nturns=1023, initial_coordinates=(2e-4, 0, 1e-4, 0, 0, 0)\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "tracking-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 49
    },
    {
      "source": "dynap_tfs = make_footprint_table(madx)\nqxs, qys = get_footprint_lines(dynap_tfs)\nplt.plot(qxs, qys, \"o--\", label=\"Tune Footprint from DYNAP Table\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "tune-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 24
    },
    {
      "source": "fig, axis = plt.subplots()\ndynap_tfs = make_footprint_table(madx)\nfootprint_polygons = get_footprint_patches(dynap_tfs)\naxis.add_collection(footprint_polygons)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "tune-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": "dynap_dframe = make_footprint_table(madx, dense=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "tune-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 33
    },
    {
      "source": "ips_df = get_pattern_twiss(madx=madx, patterns=[\"IP\"])",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "twiss-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 38
    },
    {
      "source": "triplets_df = get_pattern_twiss(\n    madx=madx,\n    patterns=[\n        r\"MQXA.[12345][RL]1\",  # Q1 and Q3 LHC\n        r\"MQXB.[AB][12345][RL]1\",  # Q2A and Q2B LHC\n        r\"MQXF[AB].[AB][12345][RL]1\",  # Q1 to Q3 A and B HL-LHC\n    ],\n)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "twiss-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 44
    },
    {
      "source": "twiss_df = get_twiss_tfs(madx, chrom=True, ripken=True)",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "twiss-routines",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": "madx.command.twiss()\nexport_madx_table(madx, table_name=\"TWISS\", file_name=\"twiss.tfs\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "miscellaneous-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 33
    },
    {
      "source": "twiss_tfs = get_table_tfs(madx, table_name=\"TWISS\")",
      "names": [],
      "example": {
        "document": "api/cpymadtools",
        "ref_id": "miscellaneous-utilities",
        "headings": [
          "Cpymadtools",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 19
    }
  ],
  "api/maths": [
    {
      "source": "best_fit_func, best_fit_params = best_fit_distribution(data, 200, axis)",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "stats-fitting",
        "headings": [
          "Maths",
          "Example"
        ]
      },
      "doc_lineno": 24
    },
    {
      "source": "best_fit_func, best_fit_params = best_fit_distribution(data, 200, axis)\npdf = fitting.make_pdf(best_fit_func, best_fit_params)",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "stats-fitting",
        "headings": [
          "Maths",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 21
    },
    {
      "source": "import scipy.stats as st\n\ntested_dists = {st.chi: \"Chi\", st.expon: \"Exponential\", st.laplace: \"Laplace\"}\nset_distributions_dict(tested_dists)",
      "names": [
        {
          "import_components": [
            "scipy",
            "stats"
          ],
          "code_str": "scipy.stats",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "scipy.stats"
        },
        {
          "import_components": [
            "scipy",
            "stats",
            "chi"
          ],
          "code_str": "st.chi",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "scipy.stats.chi"
        },
        {
          "import_components": [
            "scipy",
            "stats",
            "expon"
          ],
          "code_str": "st.expon",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "scipy.stats.expon"
        },
        {
          "import_components": [
            "scipy",
            "stats",
            "laplace"
          ],
          "code_str": "st.laplace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "scipy.stats.laplace"
        }
      ],
      "example": {
        "document": "api/maths",
        "ref_id": "stats-fitting",
        "headings": [
          "Maths",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 21
    },
    {
      "source": "get_magnitude(10)\n# returns 1",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "utilities",
        "headings": [
          "Maths",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 15
    },
    {
      "source": "get_magnitude(0.0311)\n# returns -2",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "utilities",
        "headings": [
          "Maths",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": "get_magnitude(1e-7)\n# returns -7",
      "names": [],
      "example": {
        "document": "api/maths",
        "ref_id": "utilities",
        "headings": [
          "Maths",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 25
    },
    {
      "source": "import numpy as np\n\nq = np.array([-330, 230, 430, -720, 750, -110, 410, -340, -950, -630])\nget_scaled_values_and_magnitude_string(q)\n# returns (array([-3.3,  2.3,  4.3, -7.2,  7.5, -1.1,  4.1, -3.4, -9.5, -6.3]), '{-2}')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "api/maths",
        "ref_id": "utilities",
        "headings": [
          "Maths",
          "Example",
          "Example",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 17
    }
  ],
  "api/models": [],
  "api/optics": [
    {
      "source": "params = compute_beam_parameters(1.9, 5e-6, 5e-6, 2e-3)\nprint(params)\n# Beam Parameters for particle of charge 1\n# Beam momentum = 1.900 GeV/c\n# Normalized x-emittance = 5.000 mm mrad\n# Normalized y-emittance = 5.000 mm mrad\n# Momentum deviation deltap/p = 0.002\n# -> Beam total energy = 2.119 GeV\n# -> Beam kinetic energy = 1.181 GeV\n# -> Beam rigidity = 6.333 Tm\n# -> Relativistic beta = 0.89663\n# -> Relativistic gamma = 2.258\n# -> Geometrical x emittance = 2.469 mm mrad\n# -> Geometrical y emittance = 2.469 mm mrad",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "api/optics",
        "ref_id": "beam-optics",
        "headings": [
          "Optics"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": "determine_rdt_line(1001, \"X\")\n# Output: (0, 1, 0)\n# Line at 1 * Qy in the X spectrum.",
      "names": [],
      "example": {
        "document": "api/optics",
        "ref_id": "resonance-driving-terms-utilities",
        "headings": [
          "Optics",
          "Examples"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": "determine_rdt_line(\"2002\", \"Y\")\n# Output: (-2, 3, 0)\n# Line at 3 * Qy - 2 * Qx in the Y spectrum.",
      "names": [],
      "example": {
        "document": "api/optics",
        "ref_id": "resonance-driving-terms-utilities",
        "headings": [
          "Optics",
          "Examples"
        ]
      },
      "doc_lineno": 24
    },
    {
      "source": "rdt_to_order_and_type(1001)\n# Output: 'skew_quadrupole'",
      "names": [],
      "example": {
        "document": "api/optics",
        "ref_id": "resonance-driving-terms-utilities",
        "headings": [
          "Optics",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": "rdt_to_order_and_type(\"2002\")\n# Output: 'normal_octupole'",
      "names": [],
      "example": {
        "document": "api/optics",
        "ref_id": "resonance-driving-terms-utilities",
        "headings": [
          "Optics",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": "gemitt_x = madx.globals[\"geometric_emit_x\"]\ngemitt_y = madx.globals[\"geometric_emit_y\"]\ntwiss_tfs = madx.twiss(ripken=True).dframe()\nhorizontal_size = lebedev_beam_size(\n    twiss_tfs.beta11, twiss_tfs.beta21, gemitt_x, gemitt_y\n)\nvertical_size = lebedev_beam_size(\n    twiss_tfs.beta12, twiss_tfs.beta22, gemitt_x, gemitt_y\n)",
      "names": [],
      "example": {
        "document": "api/optics",
        "ref_id": "ripken-parameters",
        "headings": [
          "Optics",
          "Examples",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 27
    },
    {
      "source": "alfx = madx.table.twiss.alfx[0]\nbetx = madx.table.twiss.betx[0]\nu = np.array([x_coords, px_coord])\nu_bar = courant_snyder_transform(u, alfx, betx)",
      "names": [],
      "example": {
        "document": "api/optics",
        "ref_id": "twiss-optics",
        "headings": [
          "Optics",
          "Examples",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 29
    }
  ],
  "api/plotting": [
    {
      "source": "plt.figure(figsize=(16, 11))\nplot_aperture(\n    madx,\n    plot_bpms=True,\n    aperture_ylim=(0, 20),\n    k0l_lim=(-4e-4, 4e-4),\n    k1l_lim=(-0.08, 0.08),\n    color=\"darkslateblue\",\n)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "aperture-plotters",
        "headings": [
          "Plotting",
          "Example"
        ]
      },
      "doc_lineno": 96
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(10, 9))\nplot_physical_apertures(madx, \"x\")\nplt.show()",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "aperture-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 42
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(10, 9))\nplot_physical_apertures(madx, \"x\", scale=1e3)\nplt.setp(ax, xlabel=\"S [m]\", ylabel=\"X [mm]\")\nplt.show()",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "aperture-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 50
    },
    {
      "source": "plot_single_ir_crossing(\n    plt.gca(),\n    b1_df,\n    b2_df,\n    plot_column=\"x\",\n    scaling=1e3,\n    ylabel=\"Orbit X $[mm]$\",\n)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "crossing-scheme-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 34
    },
    {
      "source": "plt.figure(figsize=(18, 12))\nplot_two_lhc_ips_crossings(madx, first_ip=1, second_ip=5)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "crossing-scheme-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 48
    },
    {
      "source": "plt.figure(figsize=(16, 11))\nplot_two_lhc_ips_crossings(\n    madx, first_ip=2, second_ip=8, highlight_mqx_and_mbx=False\n)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "crossing-scheme-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 53
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(10, 9))\nplot_beam_envelope(madx, \"lhcb1\", \"x\", nsigma=3)\nplt.show()",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "beam-enveloppe-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 44
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(10, 9))\nplot_beam_envelope(madx, \"lhcb1\", \"x\", nsigma=3, scale=1e3)\nplt.setp(ax, xlabel=\"S [m]\", ylabel=\"X [mm]\")\nplt.show()",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "beam-enveloppe-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 52
    },
    {
      "source": "title = \"Machine Layout\"\nplt.figure(figsize=(16, 11))\nplot_latwiss(\n    madx,\n    title=title,\n    k0l_lim=(-0.15, 0.15),\n    k1l_lim=(-0.08, 0.08),\n    disp_ylim=(-10, 125),\n    lw=3,\n)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "lattice-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 102
    },
    {
      "source": "title = \"Machine Layout\"\nplt.figure(figsize=(16, 11))\nplot_latwiss(\n    madx,\n    title=title,\n    k0l_lim=0.15,  # identical to k0l_lim=(-0.15, 0.15)\n    k1l_lim=0.08,  # identical to k1l_lim=(-0.08, 0.08)\n    disp_ylim=(-10, 125),\n    lw=3,\n)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "lattice-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples"
        ]
      },
      "doc_lineno": 117
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(6, 6))\nplot_machine_survey(\n    madx, title=\"Machine Survey\", show_elements=True, high_orders=True\n)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "lattice-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 27
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(6, 2))\nplot_machine_layout(madx, title=\"Machine Elements\", lw=3)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "layout-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 96
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(6, 2))\nplot_machine_layout(madx, title=\"Machine Elements\", lw=3)\nscale_patches(ax=fig.axes[0], scale=100, ylabel=r\"$K_{1}L$ $[10^{-2} m^{-1}]$\")",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "layout-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(10, 9))\nplot_courant_snyder_phase_space(madx, x_coords, px_coords, plane=\"Horizontal\")",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "phase-space-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 31
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(10, 9))\nplot_courant_snyder_phase_space_colored(\n    madx, x_coords, px_coords, plane=\"Horizontal\"\n)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "phase-space-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 34
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(6, 6))\nplot_resonance_lines_for_order(order=3, axis=ax, color=\"blue\")",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "tune-diagram-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 15
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(6, 6))\nplot_tune_diagram(ax=ax, max_order=4, differentiate_orders=True)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "tune-diagram-plotters",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 39
    },
    {
      "source": "fig = plot_full_ip_rdt(\n    couple_b1_tfs,\n    couple_b2_tfs,\n    b1_model_tfs,\n    b2_model_tfs,\n    ip=1,\n    figsize=(18, 9),\n    abs_ylimits=(5e-3, 6.5e-2),\n    real_ylimits=(-1e-1, 1e-1),\n    imag_ylimits=(-1e-1, 1e-1),\n)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "segment-by-segment-coupling",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 38
    },
    {
      "source": "fig = plot_rdt_component(\n    b1_segment_df=tfs.read(\"B1/sbscouple_IP1.out\"),\n    b2_segment_df=tfs.read(\"B2/sbscouple_IP1.out\"),\n    b1_model=b1_model_tfs,\n    b2_model=b2_model_tfs,\n    ip=1,\n    figsize=(8, 8),\n    b1_ylabel=r\"$\\mathrm{Beam\\ 1}$ $|f_{1001}|$\",\n    b2_ylabel=r\"$\\mathrm{Beam\\ 2}$ $|f_{1001}|$\",\n)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "segment-by-segment-coupling",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 40
    },
    {
      "source": "plot_phase_segment(ax, segment_df, b1_model_tfs, plane=\"x\", ip=1)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "segment-by-segment-phase",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": "fig = plot_phase_segment_both_beams(\n    phasex_b1_tfs,\n    phasey_b1_tfs,\n    phasex_b2_tfs,\n    phasey_b2_tfs,\n    b1_model_tfs,\n    b2_model_tfs,\n    ip=1,\n    figsize=(18, 9),\n    bbox_to_anchor=(0.535, 0.94),\n)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "segment-by-segment-phase",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 37
    },
    {
      "source": "fig = plot_phase_segment_one_beam(\n    sbs_phasex, sbs_phasey, model=b2_model_tfs, ip=5, figsize=(8, 8)\n)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "segment-by-segment-phase",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 29
    },
    {
      "source": "x = np.random.normal(size=1000)\ny = np.random.normal(size=1000)\nplt.plot(x, y, \".\", markersize=0.8)\ndraw_confidence_ellipse(x, y, n_std=2.5, edgecolor=\"red\")",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 27
    },
    {
      "source": "twiss_df = tfs.read(\"twiss_output.tfs\", index=\"NAME\")\ntwiss_df.plot(x=\"S\", y=[\"BETX\", \"BETY\"])\nips = get_lhc_ips_positions(twiss_df)\ndraw_ip_locations(ip_positions=ips)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 22
    },
    {
      "source": "ip_offset_in_segment = find_ip_s_from_segment_start(\n    segment_df=sbsphaseext_IP1, model_df=twiss_elements, ip=1\n)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": "twiss_df = tfs.read(\"twiss_output.tfs\", index=\"NAME\")\nips = get_lhc_ips_positions(twiss_df)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 22
    },
    {
      "source": "element_dfs = make_elements_groups(madx)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 25
    },
    {
      "source": "survey_dfs = make_survey_groups(madx)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 16
    },
    {
      "source": "def my_plotting_function(*args, **kwargs):\n    ax, kwargs = maybe_get_ax(**kwargs)\n    # do stuff with ax\n    ax.plot(*args, **kwargs)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 20
    },
    {
      "source": "set_arrow_label(\n    label=\"Your label\",\n    arrow_position=(1, 2),\n    label_position=(1.1 * some_value, 0.75 * another_value),\n    color=\"indianred\",\n    arrow_arc_rad=0.3,\n    fontsize=25,\n)",
      "names": [],
      "example": {
        "document": "api/plotting",
        "ref_id": "plotting-utility-functions",
        "headings": [
          "Plotting",
          "Example",
          "Examples",
          "Example",
          "Examples",
          "Examples",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 32
    }
  ],
  "api/utils": [
    {
      "source": "CommandLine.check_pid_exists(os.getpid())\n# True",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "command-line-utilities",
        "headings": [
          "Utils",
          "Example"
        ]
      },
      "doc_lineno": 13
    },
    {
      "source": "CommandLine.run(\"echo hello\")\n# returns (0, b\"hello\\r\\n\")",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "command-line-utilities",
        "headings": [
          "Utils",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 40
    },
    {
      "source": "import os\n\nmodified_env = os.environ.copy()\nmodified_env[\"ENV_VAR\"] = \"new_value\"\nCommandLine.run(\"echo $ENV_VAR\", env=modified_env)\n# returns (0, b\"new_value\")",
      "names": [
        {
          "import_components": [
            "os"
          ],
          "code_str": "os",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "os"
        }
      ],
      "example": {
        "document": "api/utils",
        "ref_id": "command-line-utilities",
        "headings": [
          "Utils",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 45
    },
    {
      "source": "CommandLine.terminate(500_000)  # max PID is 32768 (99999) on linux (macOS).\n# returns False",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "command-line-utilities",
        "headings": [
          "Utils",
          "Example",
          "Examples",
          "Example"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": "@deprecated(\"Use 'new_alternative' instead.\")\ndef old_function():\n    return \"I am old!\"",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "decorator-utilities",
        "headings": [
          "Utils",
          "Example",
          "Examples",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 14
    },
    {
      "source": "@maybe_jit\ndef calculations(x, y):\n    return (x + y) / (x - y)",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "decorator-utilities",
        "headings": [
          "Utils",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 16
    },
    {
      "source": "with timeit(lambda x: logger.debug(f\"Took {x} seconds\")):\n    some_stuff()\n    some_other_stuff()",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "context-utilities",
        "headings": [
          "Utils",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 16
    },
    {
      "source": "condor_q_output = get_the_string_as_you_wish(...)\ntasks, cluster = read_condor_q(condor_q_output)",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "htcondor-monitoring",
        "headings": [
          "Utils",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": "config_logger(level=\"DEBUG\")",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "logging-utilities",
        "headings": [
          "Utils",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 21
    },
    {
      "source": "from pyhdtoolkit.utils.logging import config_logger, SIMPLE_FORMAT\n\nconfig_logger(level=\"DEBUG\", format=SIMPLE_FORMAT)",
      "names": [],
      "example": {
        "document": "api/utils",
        "ref_id": "logging-utilities",
        "headings": [
          "Utils",
          "Example",
          "Examples",
          "Example",
          "Example",
          "Example",
          "Example",
          "Example",
          "Examples"
        ]
      },
      "doc_lineno": 27
    }
  ],
  "bibliography": [],
  "contributing": [
    {
      "source": "import pyhdtoolkit\nprint(pyhdtoolkit.version.version_info())\n#    PyhDToolkit version: 1.4.0\n#           Install path: /Users/felixsoubelet/Repositories/Work/PyhDToolkit/pyhdtoolkit\n#         Python version: 3.12.4\n#  Python implementation: 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:13:44) [Clang 16.0.6 ]\n#               Platform: macOS-14.4.1-arm64-arm-64bit",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "contributing",
        "ref_id": "bug-reports",
        "headings": [
          "Contributing",
          "Bug Reports"
        ]
      },
      "doc_lineno": 34
    }
  ],
  "gallery/demo_acd_tracking_spectra": [
    {
      "source": "qxd = spectrum.tunes[spectrum.horizontal == spectrum.horizontal.max()].to_numpy()[0]\nqyd = spectrum.tunes[spectrum.vertical == spectrum.vertical.max()].to_numpy()[0]",
      "names": [],
      "example": {
        "document": "gallery/demo_acd_tracking_spectra",
        "ref_id": "ac-dipole-driven-tracking-spectrum",
        "headings": [
          "AC Dipole Driven Tracking Spectrum"
        ]
      },
      "doc_lineno": 254
    }
  ],
  "gallery/demo_aperture": [],
  "gallery/demo_beam_enveloppe": [],
  "gallery/demo_ir_errors": [],
  "gallery/demo_lattice": [],
  "gallery/demo_lhc_crossing_schemes": [],
  "gallery/demo_lhc_rigid_waist_shift": [],
  "gallery/demo_lhc_setup": [],
  "gallery/demo_machine_survey": [],
  "gallery/demo_phase_space": [],
  "gallery/demo_sbs_plotting": [],
  "gallery/demo_stats_fitting": [],
  "gallery/demo_track_spectra": [
    {
      "source": "qx = tracks.tunes[tracks.horizontal == tracks.horizontal.max()].to_numpy()[0]\nqy = tracks.tunes[tracks.vertical == tracks.vertical.max()].to_numpy()[0]",
      "names": [],
      "example": {
        "document": "gallery/demo_track_spectra",
        "ref_id": "free-tracking-spectrum",
        "headings": [
          "Free Tracking Spectrum"
        ]
      },
      "doc_lineno": 393
    }
  ],
  "gallery/demo_tune_diagram": [],
  "gallery/index": [],
  "index": [],
  "quickstart": [],
  "release": [],
  "releases/v0.10.0": [],
  "releases/v0.11.0": [],
  "releases/v0.12.0": [],
  "releases/v0.13.0": [],
  "releases/v0.13.1": [],
  "releases/v0.13.2": [],
  "releases/v0.13.3": [],
  "releases/v0.14.0": [],
  "releases/v0.14.1": [],
  "releases/v0.15.0": [],
  "releases/v0.15.1": [],
  "releases/v0.16.0": [],
  "releases/v0.16.1": [],
  "releases/v0.17.0": [],
  "releases/v0.18.0": [],
  "releases/v0.19.0": [],
  "releases/v0.19.1": [],
  "releases/v0.2.0": [],
  "releases/v0.2.1": [],
  "releases/v0.20.0": [],
  "releases/v0.20.1": [],
  "releases/v0.21.0": [],
  "releases/v0.3.0": [],
  "releases/v0.4.0": [],
  "releases/v0.4.1": [],
  "releases/v0.5.0": [],
  "releases/v0.6.0": [],
  "releases/v0.7.0": [],
  "releases/v0.8.0": [],
  "releases/v0.8.1": [],
  "releases/v0.8.2": [],
  "releases/v0.8.3": [],
  "releases/v0.8.4": [],
  "releases/v0.8.5": [],
  "releases/v0.9.0": [],
  "releases/v0.9.1": [],
  "releases/v0.9.2": [],
  "releases/v1.0.0": [],
  "releases/v1.1.0": [],
  "releases/v1.1.1": [],
  "releases/v1.2.0": [],
  "releases/v1.3.0": [],
  "releases/v1.3.1": [],
  "releases/v1.3.2": [],
  "releases/v1.4.0": [],
  "releases/v1.5.0": [],
  "releases/v1.6.0": [],
  "releases/v1.7.0": []
}