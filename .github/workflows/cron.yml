# Runs all tests on master everyday at 10 am (UTC time)
name: Cron Testing

defaults:
  run:
    shell: bash

on:  # Runs on master branch on Mondays at 3am UTC time
  schedule:
    - cron:  '* 12 * * Sat'

jobs:
  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, macos-latest, windows-latest]
        python-version: [3.6 3.7, 3.8, 3.x]  # crons should always run latest python hence 3.x

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Install poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.0.10

      - name: Configure Poetry
        shell: bash
        run: |
          echo "::set-env name=PATH::$HOME/.poetry/bin:$PATH"
          poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Upgrade pip
        shell: bash
        run: poetry run python -m pip install pip -U

      - name: Install dependencies (Linux)
        if: startsWith(runner.os, 'Linux')
        shell: bash
        run: poetry install -v -E  madx

      - name: Install dependencies (macOS)
        if: startsWith(runner.os, 'macOS')
        shell: bash
        run: poetry install -v

      - name: Install dependencies (Windows)
        if: startsWith(runner.os, 'Windows')
        shell: bash
        run: poetry install -v

      - name: Run Tests
        shell: bash
        run: poetry run python -m pytest -p no:sugar
