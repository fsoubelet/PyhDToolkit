# Publishes to PyPI upon creation of a release
name: Upload Package to PyPI

defaults:
  run:
    shell: bash

on:  # Runs everytime a release is added to the repository
  release:
    types: [created]

jobs:
  deploy:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:  # only lowest supported python on ubuntu-latest
        os: [ubuntu-latest]
        python-version: [3.7]


    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install poetry
        uses: abatilo/actions-poetry@v2.1.0
        with:
          poetry-version: 1.1.0

      - name: Configure Poetry
        run: |
          echo "PATH=$HOME/.poetry/bin:$PATH" >> $GITHUB_ENV
          poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Upgrade pip, setuptools and wheel
        run: poetry run python -m pip install --upgrade pip setuptools wheel

      - name: Build wheels and sdist
        run: poetry build

      - name: Publish package to PyPI
        if: ${{ success() }}
        env:
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: poetry publish -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD"
