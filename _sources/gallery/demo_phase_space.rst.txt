
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/demo_phase_space.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_demo_phase_space.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_demo_phase_space.py:


.. _demo-phase-space:

===========
Phase Space
===========

This example shows how to use the `~.plotters.PhaseSpacePlotter.plot_courant_snyder_phase_space` 
and `~.plotters.PhaseSpacePlotter.plot_courant_snyder_phase_space_colored` functions to visualise
the particles' trajectories in phase space for your machine.

In this example we will generate a dummy lattice, set its working point and track particles to plot their phase space coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 15-29

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from cpymad.madx import Madx

    from pyhdtoolkit.cpymadtools.generators import LatticeGenerator
    from pyhdtoolkit.cpymadtools.matching import match_tunes_and_chromaticities
    from pyhdtoolkit.cpymadtools.plotters import PhaseSpacePlotter
    from pyhdtoolkit.cpymadtools.track import track_single_particle
    from pyhdtoolkit.utils import defaults

    defaults.config_logger(level="warning")
    plt.rcParams.update(defaults._SPHINX_GALLERY_PARAMS)  # for readability of this tutorial








.. GENERATED FROM PYTHON SOURCE LINES 31-32

Define some constants, generate a simple lattice and setup your simulation:

.. GENERATED FROM PYTHON SOURCE LINES 32-41

.. code-block:: default


    base_lattice: str = LatticeGenerator.generate_base_cas_lattice()

    n_particles: int = 150
    n_turns: int = 1000  # just enough to do a full revolution in phase space
    initial_x_coordinates = np.linspace(1e-4, 0.05, n_particles)

    x_coords, px_coords, y_coords, py_coords = [], [], [], []








.. GENERATED FROM PYTHON SOURCE LINES 42-43

Input the lattice into ``MAD-X``, and match to a desired working point:

.. GENERATED FROM PYTHON SOURCE LINES 43-57

.. code-block:: default


    madx = Madx(stdout=False)
    madx.input(base_lattice)
    match_tunes_and_chromaticities(
        madx,
        None,
        "CAS3",
        q1_target=6.335,
        q2_target=6.29,
        dq1_target=100,
        dq2_target=100,
        varied_knobs=["kqf", "kqd", "ksf", "ksd"],
    )








.. GENERATED FROM PYTHON SOURCE LINES 58-61

We can then perform tracking on a range of particles. Here the **x_coords**, **px_coords**,
**y_coords** and **py_coords** become lists of arrays, in which each element has the array of
a particle's coordinates for each turn.

.. GENERATED FROM PYTHON SOURCE LINES 61-71

.. code-block:: default


    for starting_x in initial_x_coordinates:
        tracks_df = track_single_particle(
            madx, initial_coordinates=(starting_x, 0, 0, 0, 0, 0), nturns=n_turns
        )
        x_coords.append(tracks_df["observation_point_1"].x.to_numpy())
        y_coords.append(tracks_df["observation_point_1"].y.to_numpy())
        px_coords.append(tracks_df["observation_point_1"].px.to_numpy())
        py_coords.append(tracks_df["observation_point_1"].py.to_numpy())








.. GENERATED FROM PYTHON SOURCE LINES 72-75

Now we can plot these coordinates in phase space, here for the horizontal plane.
Note that the function automatically calculates the normalized coordinates and
plots these.

.. GENERATED FROM PYTHON SOURCE LINES 75-83

.. code-block:: default


    PhaseSpacePlotter.plot_courant_snyder_phase_space(
        madx, x_coords, px_coords, plane="Horizontal", figsize=(10, 9)
    )
    plt.xlim(-0.012 * 1e3, 0.02 * 1e3)
    plt.ylim(-0.02 * 1e3, 0.023 * 1e3)
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_demo_phase_space_001.svg
   :alt: Courant-Snyder Phase Space
   :srcset: /gallery/images/sphx_glr_demo_phase_space_001.svg, /gallery/images/sphx_glr_demo_phase_space_001_2_0x.svg 2.0x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-86

Using the `~pyhdtoolkit.cpymadtools.plotters.PhaseSpacePlotter.plot_courant_snyder_phase_space_colored`
function, one gets a plot in which each color corresponds to a given particle's trajectory:

.. GENERATED FROM PYTHON SOURCE LINES 86-94

.. code-block:: default


    PhaseSpacePlotter.plot_courant_snyder_phase_space_colored(
        madx, x_coords, px_coords, plane="Horizontal", figsize=(10, 9)
    )
    plt.xlim(-0.012 * 1e3, 0.02 * 1e3)
    plt.ylim(-0.02 * 1e3, 0.023 * 1e3)
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_demo_phase_space_002.svg
   :alt: Courant-Snyder Phase Space
   :srcset: /gallery/images/sphx_glr_demo_phase_space_002.svg, /gallery/images/sphx_glr_demo_phase_space_002_2_0x.svg 2.0x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 95-101

We can see the phase space evolve as the machine's working conditions change.
In our case, this dummy lattice is meant for classes and is very robust, so if
one wants significant change, a solution is to excite a resonance!

To do so, we will use a similar lattice equipped with a sextupole, which we will
use to excite the resonance.

.. GENERATED FROM PYTHON SOURCE LINES 101-109

.. code-block:: default


    perturbed_lattice = LatticeGenerator.generate_onesext_cas_lattice()
    madx.exit()  # close the previous rpc connection

    madx = Madx(stdout=False)
    madx.input(perturbed_lattice)
    madx.input("ks1 = 0.1;")  # powering the sextupole








.. GENERATED FROM PYTHON SOURCE LINES 110-111

Let's get close to the third order resonance and track particles.

.. GENERATED FROM PYTHON SOURCE LINES 111-134

.. code-block:: default


    match_tunes_and_chromaticities(
        madx,
        None,
        "CAS3",
        q1_target=6.335,
        q2_target=6.29,
        dq1_target=100,
        dq2_target=100,
        varied_knobs=["kqf", "kqd", "ksf", "ksd"],
    )

    x_coords_sext, px_coords_sext, y_coords_sext, py_coords_sext = [], [], [], []

    for starting_x in initial_x_coordinates:
        tracks_df = track_single_particle(
            madx, initial_coordinates=(starting_x, 0, 0, 0, 0, 0), nturns=n_turns
        )
        x_coords_sext.append(tracks_df["observation_point_1"].x.to_numpy())
        y_coords_sext.append(tracks_df["observation_point_1"].y.to_numpy())
        px_coords_sext.append(tracks_df["observation_point_1"].px.to_numpy())
        py_coords_sext.append(tracks_df["observation_point_1"].py.to_numpy())








.. GENERATED FROM PYTHON SOURCE LINES 135-136

Plotting the new phase space, we can clearly see the resonance's islands!

.. GENERATED FROM PYTHON SOURCE LINES 136-143

.. code-block:: default


    PhaseSpacePlotter.plot_courant_snyder_phase_space_colored(
        madx, x_coords_sext, px_coords_sext, plane="Horizontal", figsize=(10, 9)
    )
    plt.xlim(-0.015 * 1e3, 0.015 * 1e3)
    plt.ylim(-0.015 * 1e3, 0.015 * 1e3)




.. image-sg:: /gallery/images/sphx_glr_demo_phase_space_003.svg
   :alt: Courant-Snyder Phase Space
   :srcset: /gallery/images/sphx_glr_demo_phase_space_003.svg, /gallery/images/sphx_glr_demo_phase_space_003_2_0x.svg 2.0x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 144-145

Let's not forget to close the rpc connection to ``MAD-X``:

.. GENERATED FROM PYTHON SOURCE LINES 145-148

.. code-block:: default


    madx.exit()








.. GENERATED FROM PYTHON SOURCE LINES 149-158

.. admonition:: References

   The use of the following functions, methods, classes and modules is shown
   in this example:

   - `~.cpymadtools.generators`: `~.generators.LatticeGenerator`
   - `~.cpymadtools.matching`: `~.matching.match_tunes_and_chromaticities`
   - `~.cpymadtools.plotters`: `~.plotters.PhaseSpacePlotter`, `~.plotters.PhaseSpacePlotter.plot_courant_snyder_phase_space`, `~.plotters.PhaseSpacePlotter.plot_courant_snyder_phase_space_colored`
   - `~.cpymadtools.track`: `~.track.track_single_particle`


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  41.116 seconds)


.. _sphx_glr_download_gallery_demo_phase_space.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_phase_space.py <demo_phase_space.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_phase_space.ipynb <demo_phase_space.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
