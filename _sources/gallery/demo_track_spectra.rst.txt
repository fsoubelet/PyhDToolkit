
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/demo_track_spectra.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_demo_track_spectra.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_demo_track_spectra.py:


.. _demo-free-tracking:

======================
Free Tracking Spectrum
======================

This example shows how to use the `~.track.track_single_particle` function to track a
particle with the ``TRACK`` command of ``MAD-X``, and visualise its coordinates and spectrum.

In this example we will use the LHC lattice to illustrate the tracking workflow when using
`~.cpymadtools`.

.. important::
    This example requires the `acc-models-lhc` repository to be cloned locally. One
    can get it by running the following command:

    .. code-block:: bash

        git clone -b 2022 https://gitlab.cern.ch/acc-models/acc-models-lhc.git --depth 1

    Here I set the 2022 branch for stability and reproducibility of the documentation
    builds, but you can use any branch you want.

.. GENERATED FROM PYTHON SOURCE LINES 26-36

.. code-block:: Python

    import matplotlib.pyplot as plt
    import numpy as np

    from pyhdtoolkit.cpymadtools import lhc, track
    from pyhdtoolkit.plotting.styles import _SPHINX_GALLERY_PARAMS
    from pyhdtoolkit.utils import logging

    logging.config_logger(level="error")
    plt.rcParams.update(_SPHINX_GALLERY_PARAMS)  # for readability of this tutorial








.. GENERATED FROM PYTHON SOURCE LINES 38-41

Let's start by setting up the LHC in ``MAD-X``, in this case at collision
optics and energy and with a sliced lattice. To understand the function below
have a look at the :ref:`lhc setup example <demo-lhc-setup>`.

.. GENERATED FROM PYTHON SOURCE LINES 41-46

.. code-block:: Python


    madx = lhc.prepare_lhc_run3(
        opticsfile="R2022a_A30cmC30cmA10mL200cm.madx", slicefactor=4, stdout=False
    )








.. GENERATED FROM PYTHON SOURCE LINES 47-58

Now we can track a particle. By default, the "start of machine" as ``MAD-X`` sees it
is where coordinates will be registered each turn. It is possible with this function
to provide additional elements at which to record coordinates. In our example, we'll
provide two BPMs for demonstration purposes.

The function accepts many other options that will be provided to the ``TRACK`` command,
please refer to the API reference for more information.

.. note::
    When providing additional observation points, each element must be a string,
    and be the exact name of the element as given to ``MAD-X``.

.. GENERATED FROM PYTHON SOURCE LINES 58-71

.. code-block:: Python


    tracks_dict = track.track_single_particle(
        madx,
        nturns=1023,
        initial_coordinates=(2e-4, 0, 1e-4, 0, 0, 0),  # this is actually quite high!
        observation_points=["BPMSW.1L1.B1_DOROS", "BPMSW.1R1.B1_DOROS"],
        # RECLOSS=True,  # Create an internal table recording lost particles
        # ONEPASS=True,  # Do not search closed orbit and give coordinates relatively to the reference orbit
        # DUMP=True,  # Write to file
        # FILE="track",  # File for export if DUMP=True, MAD-X appends "one" to this name if we set ONETABLE to True
        # ONETABLE=True,  # Gather all observation points data into a single table (and file if DUMP set to True)
    )








.. GENERATED FROM PYTHON SOURCE LINES 72-79

The function returns a dictionary with an entry per observation point, named
**observation_point_n** where *n* is the number of the observation point, in the
order they are provided. In our example, we will have three observation points: the
start of machine and the two provided BPMs.

Each key holds as value a `~pandas.DataFrame` with the following columns: *number*, *turn*,
*x*, *px*, *y*, *py*, *t*, *pt*, *s*, *e*. See for instance below:

.. GENERATED FROM PYTHON SOURCE LINES 79-82

.. code-block:: Python


    tracks_dict["observation_point_2"]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>number</th>
          <th>turn</th>
          <th>x</th>
          <th>px</th>
          <th>y</th>
          <th>py</th>
          <th>t</th>
          <th>pt</th>
          <th>s</th>
          <th>e</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>1.0</td>
          <td>-0.001098</td>
          <td>0.000050</td>
          <td>0.000004</td>
          <td>2.959826e-07</td>
          <td>-3.763407e-07</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>6800.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>2.0</td>
          <td>-0.000320</td>
          <td>0.000016</td>
          <td>0.000661</td>
          <td>-3.082253e-05</td>
          <td>-3.564916e-07</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>6800.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>3.0</td>
          <td>0.001329</td>
          <td>-0.000062</td>
          <td>-0.000555</td>
          <td>2.540655e-05</td>
          <td>-3.491807e-07</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>6800.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>4.0</td>
          <td>-0.000676</td>
          <td>0.000031</td>
          <td>-0.000183</td>
          <td>8.936081e-06</td>
          <td>-3.810800e-07</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>6800.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>5.0</td>
          <td>-0.000830</td>
          <td>0.000039</td>
          <td>0.000710</td>
          <td>-3.298023e-05</td>
          <td>-3.456599e-07</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>6800.0</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>1019.0</td>
          <td>0.001344</td>
          <td>-0.000062</td>
          <td>0.000734</td>
          <td>-3.397093e-05</td>
          <td>-6.461261e-07</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>6800.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>1020.0</td>
          <td>-0.000490</td>
          <td>0.000022</td>
          <td>-0.000286</td>
          <td>1.280504e-05</td>
          <td>-6.776840e-07</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>6800.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>1021.0</td>
          <td>-0.000981</td>
          <td>0.000046</td>
          <td>-0.000489</td>
          <td>2.299814e-05</td>
          <td>-6.557071e-07</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>6800.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>1022.0</td>
          <td>0.001198</td>
          <td>-0.000055</td>
          <td>0.000694</td>
          <td>-3.203857e-05</td>
          <td>-6.574820e-07</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>6800.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>1023.0</td>
          <td>0.000089</td>
          <td>-0.000005</td>
          <td>-0.000102</td>
          <td>4.251582e-06</td>
          <td>-6.764902e-07</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>6800.0</td>
        </tr>
      </tbody>
    </table>
    <p>1023 rows Ã— 10 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 83-86

Once tracking data is obtained, one can easily plot the coordinates and spectrum
using the convenience `~pandas.DataFrame` plotting methods. Here it is for the
first obeservation BPM we provided above:

.. GENERATED FROM PYTHON SOURCE LINES 86-98

.. code-block:: Python


    tracks = tracks_dict["observation_point_2"]  # point 1 for MAD-X is start of machine as defined
    tracks.plot(
        x="turn",
        y=["x", "y"],
        marker=".",
        xlabel="Turn Number",
        ylabel="Transverse Positions $[m]$",
        figsize=(18, 10),
    )
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_demo_track_spectra_001.svg
   :alt: demo track spectra
   :srcset: /gallery/images/sphx_glr_demo_track_spectra_001.svg, /gallery/images/sphx_glr_demo_track_spectra_001_2_00x.svg 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 99-101

In order to plot the spectra of the particle motion, one should first compute
them. This is the matter of a simple fast fourier transform:

.. GENERATED FROM PYTHON SOURCE LINES 101-106

.. code-block:: Python


    tracks["horizontal"] = np.abs(np.fft.fft(tracks["x"]))  # x spectrum
    tracks["vertical"] = np.abs(np.fft.fft(tracks["y"]))  # y spectrum
    tracks["tunes"] = np.linspace(0, 1, len(tracks))  # used for x-axis when plotting








.. GENERATED FROM PYTHON SOURCE LINES 107-116

.. tip::
    To get the fractional tunes of the particle, one can find the peak of the spectra.

    .. code-block:: python

     qx = tracks.tunes[tracks.horizontal == tracks.horizontal.max()].to_numpy()[0]
     qy = tracks.tunes[tracks.vertical == tracks.vertical.max()].to_numpy()[0]

One can then plot the spectra by plotting the computed values against the tune space:

.. GENERATED FROM PYTHON SOURCE LINES 116-128

.. code-block:: Python


    tracks.plot(
        x="tunes",
        y=["horizontal", "vertical"],
        marker=".",
        xlim=(0.25, 0.4),
        xlabel="Tunes",
        ylabel="Spectrum [a.u]",
        figsize=(18, 10),
    )
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_demo_track_spectra_002.svg
   :alt: demo track spectra
   :srcset: /gallery/images/sphx_glr_demo_track_spectra_002.svg, /gallery/images/sphx_glr_demo_track_spectra_002_2_00x.svg 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 129-134

In case the user provided ``ONETABLE=True`` to the tracking function, then all
observation points data will be stored in a single `~pandas.DataFrame` that can
be accessed with the **trackone** key in the returned dictionary. In that case,
accessing the coordinates at a given observation point is done by making use of
the DataFrame indexing syntax:

.. GENERATED FROM PYTHON SOURCE LINES 134-147

.. code-block:: Python


    tracks_dict = track.track_single_particle(
        madx,
        nturns=10,  # few turns to speedup the example
        initial_coordinates=(2e-4, 0, 1e-4, 0, 0, 0),
        observation_points=["BPMSW.1L1.B1_DOROS", "BPMSW.1R1.B1_DOROS"],
        ONETABLE=True,  # Gather all observation points data into a single table (and file if DUMP set to True)
    )

    observation_point = "BPMSW.1L1.B1_DOROS"
    tracks = tracks_dict["trackone"]
    tracks[tracks.index == observation_point.lower()]  # cpymad lower-cases the names






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>number</th>
          <th>turn</th>
          <th>x</th>
          <th>px</th>
          <th>y</th>
          <th>py</th>
          <th>t</th>
          <th>pt</th>
          <th>s</th>
          <th>e</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>1.0</td>
          <td>-0.001098</td>
          <td>0.000050</td>
          <td>0.000004</td>
          <td>2.959826e-07</td>
          <td>-3.763407e-07</td>
          <td>0.0</td>
          <td>23497.790616</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>2.0</td>
          <td>-0.000320</td>
          <td>0.000016</td>
          <td>0.000661</td>
          <td>-3.082253e-05</td>
          <td>-3.564916e-07</td>
          <td>0.0</td>
          <td>23497.790616</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>3.0</td>
          <td>0.001329</td>
          <td>-0.000062</td>
          <td>-0.000555</td>
          <td>2.540655e-05</td>
          <td>-3.491807e-07</td>
          <td>0.0</td>
          <td>23497.790616</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>4.0</td>
          <td>-0.000676</td>
          <td>0.000031</td>
          <td>-0.000183</td>
          <td>8.936081e-06</td>
          <td>-3.810800e-07</td>
          <td>0.0</td>
          <td>23497.790616</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>5.0</td>
          <td>-0.000830</td>
          <td>0.000039</td>
          <td>0.000710</td>
          <td>-3.298023e-05</td>
          <td>-3.456599e-07</td>
          <td>0.0</td>
          <td>23497.790616</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>6.0</td>
          <td>0.001274</td>
          <td>-0.000059</td>
          <td>-0.000407</td>
          <td>1.847747e-05</td>
          <td>-3.640162e-07</td>
          <td>0.0</td>
          <td>23497.790616</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>7.0</td>
          <td>-0.000119</td>
          <td>0.000005</td>
          <td>-0.000362</td>
          <td>1.715175e-05</td>
          <td>-3.759093e-07</td>
          <td>0.0</td>
          <td>23497.790616</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>8.0</td>
          <td>-0.001186</td>
          <td>0.000055</td>
          <td>0.000715</td>
          <td>-3.307915e-05</td>
          <td>-3.426777e-07</td>
          <td>0.0</td>
          <td>23497.790616</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>9.0</td>
          <td>0.000974</td>
          <td>-0.000045</td>
          <td>-0.000233</td>
          <td>1.033764e-05</td>
          <td>-3.780484e-07</td>
          <td>0.0</td>
          <td>23497.790616</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>bpmsw.1l1.b1_doros</th>
          <td>1.0</td>
          <td>10.0</td>
          <td>0.000467</td>
          <td>-0.000022</td>
          <td>-0.000518</td>
          <td>2.430951e-05</td>
          <td>-3.636226e-07</td>
          <td>0.0</td>
          <td>23497.790616</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 148-149

Let's not forget to close the rpc connection to ``MAD-X``:

.. GENERATED FROM PYTHON SOURCE LINES 149-152

.. code-block:: Python


    madx.exit()








.. GENERATED FROM PYTHON SOURCE LINES 153-160

.. admonition:: References

   The use of the following functions, methods, classes and modules is shown
   in this example:

   - `~.cpymadtools.lhc`: `~.lhc._setup.prepare_lhc_run3`
   - `~.cpymadtools.track`: `~.track.track_single_particle`


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.417 seconds)


.. _sphx_glr_download_gallery_demo_track_spectra.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_track_spectra.ipynb <demo_track_spectra.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_track_spectra.py <demo_track_spectra.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: demo_track_spectra.zip <demo_track_spectra.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
