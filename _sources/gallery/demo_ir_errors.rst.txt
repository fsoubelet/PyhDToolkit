
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/demo_ir_errors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_demo_ir_errors.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_demo_ir_errors.py:


.. _demo-ir-errors:

=========================
LHC IR Errors Assignments
=========================

This example shows how to use the `~.lhc.misalign_lhc_ir_quadrupoles` function
to assign magnet errors in the Insertion Region magnets of the LHC.

.. warning::
    The implementation of this function makes it valid only for LHC IP IRs, which are 
    1, 2, 5 and 8. Other IRs have different layouts that are incompatible.

.. GENERATED FROM PYTHON SOURCE LINES 16-28

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from cpymad.madx import Madx

    from pyhdtoolkit.cpymadtools import lhc, matching
    from pyhdtoolkit.plotting.styles import _SPHINX_GALLERY_PARAMS
    from pyhdtoolkit.utils import logging

    logging.config_logger(level="error")
    plt.rcParams.update(_SPHINX_GALLERY_PARAMS)  # for readability of this tutorial








.. GENERATED FROM PYTHON SOURCE LINES 30-31

Setup a simple LHC simulation in ``MAD-X``, at injection energy (450 GeV)

.. GENERATED FROM PYTHON SOURCE LINES 31-38

.. code-block:: default


    madx = Madx(stdout=False)
    madx.option(echo=False, warn=False)

    madx.call("lhc/lhc_as-built.seq")
    madx.call("lhc/opticsfile.22")  # collision optics








.. GENERATED FROM PYTHON SOURCE LINES 39-41

Importantly in ``MAD-X``, when dealing with RNG one should set a generator and
seed, which we do below:

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: default


    madx.option(rand="best", randid=np.random.randint(1, 11))  # random number generator
    madx.eoption(seed=np.random.randint(1, 999999999))  # not using default seed








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Let's define beams and use the **lhcb1** sequence.

.. GENERATED FROM PYTHON SOURCE LINES 47-51

.. code-block:: default


    lhc.make_lhc_beams(madx, energy=7000)
    madx.command.use(sequence="lhcb1")








.. GENERATED FROM PYTHON SOURCE LINES 52-58

We can now install errors in the IR quadrupoles. Note that this function accepts
keyword arguments for the error definition, and any *kwarg* will be passed to the
``EALIGN`` command of ``MAD-X``.

Here let's apply systematic horizontal misalignment errors and tilt errors to the
quadrupoles Q1 to Q6 (first to sixth) on both sides of IP1:

.. GENERATED FROM PYTHON SOURCE LINES 58-69

.. code-block:: default


    lhc.misalign_lhc_ir_quadrupoles(
        madx,
        ips=[1],
        beam=1,
        quadrupoles=[1, 2, 3, 4, 5, 6],
        sides="RL",
        dx="0.001*TGAUSS(2.5)",
        dpsi="0.003*GAUSS(2.5)",
    )








.. GENERATED FROM PYTHON SOURCE LINES 70-72

Let's match to our working point, and retrieve the errors directly through the
internal ``MAD-X`` tables through `~cpymad`:

.. GENERATED FROM PYTHON SOURCE LINES 72-77

.. code-block:: default


    madx.command.use(sequence="lhcb1")
    matching.match_tunes_and_chromaticities(madx, "lhc", "lhcb1", 62.31, 60.32, 2.0, 2.0)
    error_table = madx.table.ir_quads_errors.dframe()








.. GENERATED FROM PYTHON SOURCE LINES 78-80

Let's quickly re-arrange the resulting `~pandas.DataFrame` to align with the
order in which they are in the machine:

.. GENERATED FROM PYTHON SOURCE LINES 80-104

.. code-block:: default


    error_table.name = error_table.name.apply(lambda x: x[:-2])
    error_table = error_table.set_index("name", drop=True)
    error_table = error_table[["dx", "dy", "dpsi", "dtheta"]]  # only keep those
    error_table = error_table.reindex(  # their order in the machine
        [
            "mqml.6l1.b1",
            "mqml.5l1.b1",
            "mqy.4l1.b1",
            "mqxa.3l1",
            "mqxb.b2l1",
            "mqxb.a2l1",
            "mqxa.1l1",
            "mqxa.1r1",
            "mqxb.a2r1",
            "mqxb.b2r1",
            "mqxa.3r1",
            "mqy.4r1.b1",
            "mqml.5r1.b1",
            "mqml.6r1.b1",
        ]
    )
    error_table






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>dx</th>
          <th>dy</th>
          <th>dpsi</th>
          <th>dtheta</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>mqml.6l1.b1</th>
          <td>0.001690</td>
          <td>0.0</td>
          <td>0.000649</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>mqml.5l1.b1</th>
          <td>0.000132</td>
          <td>0.0</td>
          <td>0.001433</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>mqy.4l1.b1</th>
          <td>0.000514</td>
          <td>0.0</td>
          <td>-0.003400</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>mqxa.3l1</th>
          <td>-0.000797</td>
          <td>0.0</td>
          <td>-0.001698</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>mqxb.b2l1</th>
          <td>-0.001007</td>
          <td>0.0</td>
          <td>-0.003302</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>mqxb.a2l1</th>
          <td>0.000607</td>
          <td>0.0</td>
          <td>0.004580</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>mqxa.1l1</th>
          <td>-0.000337</td>
          <td>0.0</td>
          <td>-0.000482</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>mqxa.1r1</th>
          <td>0.000320</td>
          <td>0.0</td>
          <td>0.000807</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>mqxb.a2r1</th>
          <td>0.000633</td>
          <td>0.0</td>
          <td>0.000625</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>mqxb.b2r1</th>
          <td>-0.000050</td>
          <td>0.0</td>
          <td>0.000430</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>mqxa.3r1</th>
          <td>0.000482</td>
          <td>0.0</td>
          <td>-0.001695</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>mqy.4r1.b1</th>
          <td>0.000587</td>
          <td>0.0</td>
          <td>0.001497</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>mqml.5r1.b1</th>
          <td>0.000720</td>
          <td>0.0</td>
          <td>0.004273</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>mqml.6r1.b1</th>
          <td>-0.001380</td>
          <td>0.0</td>
          <td>0.000878</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 105-106

We can also check that all these elements have been correctly affected:

.. GENERATED FROM PYTHON SOURCE LINES 106-110

.. code-block:: default


    assert all(error_table["dx"] != 0)
    assert all(error_table["dpsi"] != 0)








.. GENERATED FROM PYTHON SOURCE LINES 111-113

We can visualise the distribution of errors across these magnets with a bar
chart, making use of the `~pandas.DataFrame` plotting capabilities:

.. GENERATED FROM PYTHON SOURCE LINES 113-130

.. code-block:: default


    axes = error_table.plot(
        y=["dx", "dpsi"],
        kind="bar",
        title="Applied Errors",
        xlabel="Magnet Name",
        figsize=(20, 11),
        subplots=True,
        rot=45,
    )

    axes[0].set_title("")
    axes[0].set_ylabel("dx [m]")
    axes[1].set_title("")
    axes[1].set_ylabel("dpsi [rad]")
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_demo_ir_errors_001.svg
   :alt: Applied Errors
   :srcset: /gallery/images/sphx_glr_demo_ir_errors_001.svg, /gallery/images/sphx_glr_demo_ir_errors_001_2_00x.svg 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 131-132

Let's not forget to close the rpc connection to ``MAD-X``:

.. GENERATED FROM PYTHON SOURCE LINES 132-135

.. code-block:: default


    madx.exit()








.. GENERATED FROM PYTHON SOURCE LINES 136-143

.. admonition:: References

   The use of the following functions, methods, classes and modules is shown
   in this example:

   - `~.cpymadtools.lhc`: `~.lhc._setup.make_lhc_beams`, `~.lhc._errors.misalign_lhc_ir_quadrupoles`
   - `~.cpymadtools.matching`: `~.matching.match_tunes_and_chromaticities`


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.832 seconds)


.. _sphx_glr_download_gallery_demo_ir_errors.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_ir_errors.py <demo_ir_errors.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_ir_errors.ipynb <demo_ir_errors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
