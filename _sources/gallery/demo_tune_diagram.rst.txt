
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/demo_tune_diagram.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_demo_tune_diagram.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_demo_tune_diagram.py:


.. _demo-tune-diagram:

============
Tune Diagram
============

This example shows how to use the `~.plotting.tune.plot_tune_diagram` function 
to visualise resonance lines up to certain orders.

.. GENERATED FROM PYTHON SOURCE LINES 12-21

.. code-block:: default

    import matplotlib.pyplot as plt

    from pyhdtoolkit.plotting.styles import _SPHINX_GALLERY_PARAMS
    from pyhdtoolkit.plotting.tune import plot_tune_diagram
    from pyhdtoolkit.utils import logging

    logging.config_logger(level="warning")
    plt.rcParams.update(_SPHINX_GALLERY_PARAMS)  # for readability of this tutorial








.. GENERATED FROM PYTHON SOURCE LINES 23-28

The tune diagram allows on to visualise resonance lines up to certain orders,
and to know where the working point of the machine stands compared to these resonances
By default, the `~.plotting.tune.plot_tune_diagram` function will plot all resonance lines
up to the specified order, with line thickness decreasing with the resonance order.
The max order is set 6, as the graph becomes unreadable above this value.

.. GENERATED FROM PYTHON SOURCE LINES 28-33

.. code-block:: default


    fig, ax = plt.subplots(figsize=(10, 10))
    plot_tune_diagram(max_order=5)
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_demo_tune_diagram_001.svg
   :alt: demo tune diagram
   :srcset: /gallery/images/sphx_glr_demo_tune_diagram_001.svg, /gallery/images/sphx_glr_demo_tune_diagram_001_2_0x.svg 2.0x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 34-42

One can add their machine's working point onto the figure with a new matplotlib
plotting command. The graph is limited to the ranges [0, 1] on each axis as the
fractional part of the tunes is what determines stability.

.. tip::
    Remember that when thinking about tunes, only the fractional part is relevant
    when determining the stability. As so, plot that value onto the graph, or it would
    be way out of range

.. GENERATED FROM PYTHON SOURCE LINES 42-48

.. code-block:: default


    fig, ax = plt.subplots(figsize=(10, 10))
    plot_tune_diagram(max_order=5)
    plt.scatter(0.35, 0.29, marker="o", color="red")  # this is close to a third order resonance
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_demo_tune_diagram_002.svg
   :alt: demo tune diagram
   :srcset: /gallery/images/sphx_glr_demo_tune_diagram_002.svg, /gallery/images/sphx_glr_demo_tune_diagram_002_2_0x.svg 2.0x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 49-53

On the previous plot, it is not obvious that our working point is close to a
*third* order resonance. One may then want to differentiate the origin of each
line, aka knowing which resonance order is responsible for each given line. This
makes it easier to see the resonances near your working point.

.. GENERATED FROM PYTHON SOURCE LINES 53-65

.. code-block:: default


    fig, ax = plt.subplots(figsize=(10, 10))
    plot_tune_diagram(
        max_order=6,
        differentiate_orders=True,  # different orders will have a different color and linestyle
        legend_title="Resonance Lines",  # if given, legend is added to figure
    )
    plt.scatter(0.35, 0.29, marker="o", color="red")  # this is close to a third order resonance
    plt.xlim(0, 0.5)  # limit the x-axis to the range [0, 0.5] for visibility
    plt.ylim(0, 0.5)  # limit the y-axis to the range [0, 0.5] for visibility
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_demo_tune_diagram_003.svg
   :alt: demo tune diagram
   :srcset: /gallery/images/sphx_glr_demo_tune_diagram_003.svg, /gallery/images/sphx_glr_demo_tune_diagram_003_2_0x.svg 2.0x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 66-67

It is now much easier to identify the resonances lines near our working point :)

.. GENERATED FROM PYTHON SOURCE LINES 69-75

.. admonition:: References

   The use of the following functions, methods, classes and modules is shown
   in this example:

   - `~.plotting.tune`: `~.plotting.tune.plot_tune_diagram`


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.594 seconds)


.. _sphx_glr_download_gallery_demo_tune_diagram.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_tune_diagram.py <demo_tune_diagram.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_tune_diagram.ipynb <demo_tune_diagram.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
