
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/demo_aperture.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_demo_aperture.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_demo_aperture.py:


.. _demo-accelerator-aperture:

====================
Accelerator Aperture
====================

This example shows how to use the `~.plotting.aperture.plot_aperture` and
`~.plotting.aperture.plot_physical_apertures` functions to visualise the
available aperture in your machine, with the LHC used for this example.

.. important::
    This example requires the `acc-models-lhc` repository to be cloned locally. One
    can get it by running the following command:

    .. code-block:: bash

        git clone -b 2022 https://gitlab.cern.ch/acc-models/acc-models-lhc.git --depth 1

    Here I set the 2022 branch for stability and reproducibility of the documentation
    builds, but you can use any branch you want.

.. GENERATED FROM PYTHON SOURCE LINES 24-37

.. code-block:: Python


    import matplotlib.pyplot as plt

    from cpymad.madx import Madx

    from pyhdtoolkit.cpymadtools import lhc
    from pyhdtoolkit.plotting.aperture import plot_aperture, plot_physical_apertures
    from pyhdtoolkit.plotting.styles import _SPHINX_GALLERY_PARAMS
    from pyhdtoolkit.utils import logging

    logging.config_logger(level="error")
    plt.rcParams.update(_SPHINX_GALLERY_PARAMS)  # for readability of this tutorial








.. GENERATED FROM PYTHON SOURCE LINES 38-41

Let's start by setting up the LHC in ``MAD-X``, in this case at injection
optics and energy. To understand the function below have a look at the
:ref:`lhc setup example <demo-lhc-setup>`.

.. GENERATED FROM PYTHON SOURCE LINES 41-48

.. code-block:: Python


    madx: Madx = lhc.prepare_lhc_run3(
        opticsfile="acc-models-lhc/operation/optics/R2022a_A11mC11mA10mL10m.madx",
        energy=450,  # given in GeV
        stdout=False,
    )








.. GENERATED FROM PYTHON SOURCE LINES 49-51

We now call the aperture definitions and tolerances, then task ``MAD-X`` with
computing the available aperture:

.. GENERATED FROM PYTHON SOURCE LINES 51-60

.. code-block:: Python


    madx.call("lhc/aperture.b1.madx")
    madx.call("lhc/aper_tol.b1.madx")

    madx.command.twiss()
    madx.command.aperture(
        cor=0.002, dp=8.6e-4, halo="{6,6,6,6}", bbeat=1.05, dparx=0.14, dpary=0.14
    )








.. GENERATED FROM PYTHON SOURCE LINES 61-64

The details for the ``MAD-X`` ``aperture`` command can be found in the manual.
We can now determine the exact position of the IP5 point and plot the LHC
injection aperture:

.. GENERATED FROM PYTHON SOURCE LINES 64-68

.. code-block:: Python


    twiss_df = madx.table.twiss.dframe()
    ip5s = twiss_df.s[twiss_df.name.str.contains("ip5")].to_numpy()[0]








.. GENERATED FROM PYTHON SOURCE LINES 69-72

And now we can plot the aperture around IP5 with the `~.plotting.aperture.plot_aperture`
function. This uses the values in the ``APERTURE`` table of ``MAD-X``, which
gives aperture information in terms of beam sigma.

.. GENERATED FROM PYTHON SOURCE LINES 72-90

.. code-block:: Python


    plt.figure(figsize=(20, 13))
    plot_aperture(
        madx,
        title="IR5, Collision Optics - Beam 1 Aperture Tolerance",
        plot_bpms=True,
        xlimits=(ip5s - 80, ip5s + 80),
        aperture_ylim=(0, 30),
        k0l_lim=(-4e-4, 4e-4),
        k1l_lim=(-0.08, 0.08),
        color="darkslateblue",
    )
    for axis in plt.gcf().get_axes():
        axis.axvline(x=ip5s, color="red", ls="--", lw=1.5, label="IP5")
    plt.gca().legend()
    plt.show()





.. image-sg:: /gallery/images/sphx_glr_demo_aperture_001.svg
   :alt: IR5, Collision Optics - Beam 1 Aperture Tolerance
   :srcset: /gallery/images/sphx_glr_demo_aperture_001.svg, /gallery/images/sphx_glr_demo_aperture_001_2_00x.svg 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 91-94

We can also go for a different type of aperture plot, which tries to give
the elements' real physical apertures, with the `~.plotting.aperture.plot_physical_apertures`
function:

.. GENERATED FROM PYTHON SOURCE LINES 94-101

.. code-block:: Python


    plt.figure(figsize=(18, 10))
    plot_physical_apertures(madx, plane="x")
    plt.setp(plt.gca(), xlabel="S [m]", ylabel="X [m]")
    plt.ylim(-0.035, 0.035)
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_demo_aperture_002.svg
   :alt: demo aperture
   :srcset: /gallery/images/sphx_glr_demo_aperture_002.svg, /gallery/images/sphx_glr_demo_aperture_002_2_00x.svg 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 102-104

We can give a ``scale`` argument to change the scale of the Y-axis. Let's make
it in centimeters here:

.. GENERATED FROM PYTHON SOURCE LINES 104-112

.. code-block:: Python


    plt.figure(figsize=(18, 10))
    plot_physical_apertures(madx, plane="x", scale=1e2)  # just give the scaling factor
    plt.setp(plt.gca(), xlabel="S [m]", ylabel="Y [cm]")
    plt.ylim(-4, 4)
    plt.xlim(9000, 11_000)
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_demo_aperture_003.svg
   :alt: demo aperture
   :srcset: /gallery/images/sphx_glr_demo_aperture_003.svg, /gallery/images/sphx_glr_demo_aperture_003_2_00x.svg 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 113-114

Let's not forget to close the rpc connection to ``MAD-X``:

.. GENERATED FROM PYTHON SOURCE LINES 114-117

.. code-block:: Python


    madx.exit()








.. GENERATED FROM PYTHON SOURCE LINES 118-125

.. admonition:: References

   The use of the following functions, methods, classes and modules is shown
   in this example:

   - `~.cpymadtools.lhc`: `~.lhc._setup.prepare_lhc_run3`
   - `~.plotting.aperture`: `~.plotting.aperture.plot_aperture`, `~.plotting.aperture.plot_physical_apertures`


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 36.250 seconds)


.. _sphx_glr_download_gallery_demo_aperture.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_aperture.ipynb <demo_aperture.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_aperture.py <demo_aperture.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: demo_aperture.zip <demo_aperture.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
