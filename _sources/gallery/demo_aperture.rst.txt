
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/demo_aperture.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_demo_aperture.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_demo_aperture.py:


.. _demo-accelerator-aperture:

====================
Accelerator Aperture
====================

This example shows how to use the `~.plotting.aperture.plot_aperture` function
to visualise the available aperture in your machine, with the LHC for example.

.. GENERATED FROM PYTHON SOURCE LINES 12-25

.. code-block:: default


    import matplotlib.pyplot as plt

    from cpymad.madx import Madx

    from pyhdtoolkit.cpymadtools import lhc
    from pyhdtoolkit.plotting.aperture import plot_aperture, plot_physical_apertures
    from pyhdtoolkit.plotting.styles import _SPHINX_GALLERY_PARAMS
    from pyhdtoolkit.utils import logging

    logging.config_logger(level="error")
    plt.rcParams.update(_SPHINX_GALLERY_PARAMS)  # for readability of this tutorial








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Setup a simple LHC simulation in ``MAD-X``, at injection energy (450 GeV)

.. GENERATED FROM PYTHON SOURCE LINES 27-37

.. code-block:: default


    madx = Madx(stdout=False)
    madx.option(echo=False, warn=False)

    madx.call("lhc/lhc_as-built.seq")
    madx.call("lhc/opticsfile.1")  # injection optics

    lhc.make_lhc_beams(madx, energy=450)
    madx.command.use(sequence="lhcb1")








.. GENERATED FROM PYTHON SOURCE LINES 38-40

We now call the aperture definitions and tolerances, then task ``MAD-X`` with
computing the available aperture:

.. GENERATED FROM PYTHON SOURCE LINES 40-47

.. code-block:: default


    madx.call("lhc/aperture.b1.madx")
    madx.call("lhc/aper_tol.b1.madx")

    madx.command.twiss()
    madx.command.aperture(cor=0.002, dp=8.6e-4, halo="{6,6,6,6}", bbeat=1.05, dparx=0.14, dpary=0.14)








.. GENERATED FROM PYTHON SOURCE LINES 48-50

We can now determine the exact position of the IP5 point and plot the LHC
injection aperture:

.. GENERATED FROM PYTHON SOURCE LINES 50-54

.. code-block:: default


    twiss_df = madx.table.twiss.dframe()
    ip5s = twiss_df.s[twiss_df.name.str.contains("ip5")].to_numpy()[0]








.. GENERATED FROM PYTHON SOURCE LINES 55-56

And now we can plot the aperture:

.. GENERATED FROM PYTHON SOURCE LINES 56-74

.. code-block:: default


    plt.figure(figsize=(20, 13))
    plot_aperture(
        madx,
        title="IR5, Collision Optics - Beam 1 Aperture Tolerance",
        plot_bpms=True,
        xlimits=(ip5s - 80, ip5s + 80),
        aperture_ylim=(0, 25),
        k0l_lim=(-4e-4, 4e-4),
        k1l_lim=(-0.08, 0.08),
        color="darkslateblue",
    )
    for axis in plt.gcf().get_axes():
        axis.axvline(x=ip5s, color="red", ls="--", lw=1.5, label="IP5")
    plt.gca().legend()
    plt.show()





.. image-sg:: /gallery/images/sphx_glr_demo_aperture_001.svg
   :alt: IR5, Collision Optics - Beam 1 Aperture Tolerance
   :srcset: /gallery/images/sphx_glr_demo_aperture_001.svg, /gallery/images/sphx_glr_demo_aperture_001_2_00x.svg 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 75-78

We can also go for a different type of aperture plot, which tries to give 
the elements' real physical apertures, with the `~.plotting.aperture.plot_physical_apertures`
function:

.. GENERATED FROM PYTHON SOURCE LINES 78-84

.. code-block:: default


    plt.figure(figsize=(18, 10))
    plot_physical_apertures(madx, plane="x")
    plt.setp(plt.gca(), xlabel="S [m]", ylabel="X [m]")
    plt.ylim(-0.035, 0.035)




.. image-sg:: /gallery/images/sphx_glr_demo_aperture_002.svg
   :alt: demo aperture
   :srcset: /gallery/images/sphx_glr_demo_aperture_002.svg, /gallery/images/sphx_glr_demo_aperture_002_2_00x.svg 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 85-87

We can give a ``scale`` argument to change the scale of the Y-axis. Let's make
it in centimeters here:

.. GENERATED FROM PYTHON SOURCE LINES 87-94

.. code-block:: default


    plt.figure(figsize=(18, 10))
    plot_physical_apertures(madx, plane="x", scale=1e2)  # just give the scaling factor
    plt.setp(plt.gca(), xlabel="S [m]", ylabel="Y [cm]")
    plt.ylim(-4, 4)
    plt.xlim(9000, 11_000)




.. image-sg:: /gallery/images/sphx_glr_demo_aperture_003.svg
   :alt: demo aperture
   :srcset: /gallery/images/sphx_glr_demo_aperture_003.svg, /gallery/images/sphx_glr_demo_aperture_003_2_00x.svg 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 95-96

Let's not forget to close the rpc connection to ``MAD-X``:

.. GENERATED FROM PYTHON SOURCE LINES 96-99

.. code-block:: default


    madx.exit()








.. GENERATED FROM PYTHON SOURCE LINES 100-107

.. admonition:: References

   The use of the following functions, methods, classes and modules is shown
   in this example:

   - `~.cpymadtools.lhc`: `~.lhc._setup.make_lhc_beams`
   - `~.plotting.aperture`: `~.plotting.aperture.plot_aperture`


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  34.535 seconds)


.. _sphx_glr_download_gallery_demo_aperture.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_aperture.py <demo_aperture.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_aperture.ipynb <demo_aperture.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
